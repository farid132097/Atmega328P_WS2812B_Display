
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000ae0  00000b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800114  00800114  00000b88  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000063f  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001006  00000000  00000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000503  00000000  00000000  0000224d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001363  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000450  00000000  00000000  00003ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000655  00000000  00000000  00003f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000085f  00000000  00000000  00004559  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 34       	cpi	r26, 0x45	; 69
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6e 05 	jmp	0xadc	; 0xadc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "ws2812b.h"
#include "debug.h"

int main(void){
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29

  WS2812B_Init();
  ae:	0e 94 57 01 	call	0x2ae	; 0x2ae <WS2812B_Init>
  Display_Init();
  b2:	0e 94 1b 05 	call	0xa36	; 0xa36 <Display_Init>
  debug_init();
  b6:	0e 94 c5 04 	call	0x98a	; 0x98a <debug_init>
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  be:	0c e2       	ldi	r16, 0x2C	; 44
  c0:	11 e0       	ldi	r17, 0x01	; 1
  
  int i=0;
  
  while(1){
    
	Display_Send_Row(i);
  c2:	ce 01       	movw	r24, r28
  c4:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	Display_Send_Row(i);
  c8:	ce 01       	movw	r24, r28
  ca:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	Display_Send_Row(i);
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	Display_Send_Row(i);
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	Display_Send_Row(i);
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	Display_Send_Row(i);
  e0:	ce 01       	movw	r24, r28
  e2:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	Display_Send_Row(i);
  e6:	ce 01       	movw	r24, r28
  e8:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	Display_Send_Row(i);
  ec:	ce 01       	movw	r24, r28
  ee:	0e 94 25 05 	call	0xa4a	; 0xa4a <Display_Send_Row>
	i++;
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	88 ee       	ldi	r24, 0xE8	; 232
  f6:	93 e0       	ldi	r25, 0x03	; 3
  f8:	f8 01       	movw	r30, r16
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x54>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 100:	d9 f7       	brne	.-10     	; 0xf8 <main+0x52>
 102:	df cf       	rjmp	.-66     	; 0xc2 <main+0x1c>

00000104 <WS2812B_Gpio_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
 104:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
 106:	5d 98       	cbi	0x0b, 5	; 11
}
 108:	08 95       	ret

0000010a <WS2812B_Send_Byte>:

void WS2812B_Send_Byte(uint8_t val){
  if(val & 0x80){
 10a:	87 ff       	sbrs	r24, 7
 10c:	0b c0       	rjmp	.+22     	; 0x124 <WS2812B_Send_Byte+0x1a>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 10e:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 110:	00 00       	nop
    asm( "nop ");
 112:	00 00       	nop
    asm( "nop ");
 114:	00 00       	nop
    asm( "nop ");
 116:	00 00       	nop
    asm( "nop ");
 118:	00 00       	nop
    asm( "nop ");
 11a:	00 00       	nop
	asm( "nop ");
 11c:	00 00       	nop
    asm( "nop ");
 11e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 120:	5d 98       	cbi	0x0b, 5	; 11
 122:	0a c0       	rjmp	.+20     	; 0x138 <WS2812B_Send_Byte+0x2e>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 124:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 126:	00 00       	nop
    asm( "nop ");
 128:	00 00       	nop
    asm( "nop ");
 12a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 12c:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 12e:	00 00       	nop
	asm( "nop ");
 130:	00 00       	nop
    asm( "nop ");
 132:	00 00       	nop
    asm( "nop ");
 134:	00 00       	nop
	asm( "nop ");
 136:	00 00       	nop
  }
  
  
  if(val & 0x40){
 138:	86 ff       	sbrs	r24, 6
 13a:	0b c0       	rjmp	.+22     	; 0x152 <WS2812B_Send_Byte+0x48>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 13c:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 13e:	00 00       	nop
    asm( "nop ");
 140:	00 00       	nop
    asm( "nop ");
 142:	00 00       	nop
    asm( "nop ");
 144:	00 00       	nop
    asm( "nop ");
 146:	00 00       	nop
    asm( "nop ");
 148:	00 00       	nop
	asm( "nop ");
 14a:	00 00       	nop
    asm( "nop ");
 14c:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 14e:	5d 98       	cbi	0x0b, 5	; 11
 150:	0a c0       	rjmp	.+20     	; 0x166 <WS2812B_Send_Byte+0x5c>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 152:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 154:	00 00       	nop
    asm( "nop ");
 156:	00 00       	nop
    asm( "nop ");
 158:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 15a:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 15c:	00 00       	nop
	asm( "nop ");
 15e:	00 00       	nop
    asm( "nop ");
 160:	00 00       	nop
    asm( "nop ");
 162:	00 00       	nop
	asm( "nop ");
 164:	00 00       	nop
  }
  
  
  if(val & 0x20){
 166:	85 ff       	sbrs	r24, 5
 168:	0b c0       	rjmp	.+22     	; 0x180 <WS2812B_Send_Byte+0x76>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 16a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 16c:	00 00       	nop
    asm( "nop ");
 16e:	00 00       	nop
    asm( "nop ");
 170:	00 00       	nop
    asm( "nop ");
 172:	00 00       	nop
    asm( "nop ");
 174:	00 00       	nop
    asm( "nop ");
 176:	00 00       	nop
	asm( "nop ");
 178:	00 00       	nop
    asm( "nop ");
 17a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 17c:	5d 98       	cbi	0x0b, 5	; 11
 17e:	0a c0       	rjmp	.+20     	; 0x194 <WS2812B_Send_Byte+0x8a>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 180:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 182:	00 00       	nop
    asm( "nop ");
 184:	00 00       	nop
    asm( "nop ");
 186:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 188:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 18a:	00 00       	nop
	asm( "nop ");
 18c:	00 00       	nop
    asm( "nop ");
 18e:	00 00       	nop
    asm( "nop ");
 190:	00 00       	nop
	asm( "nop ");
 192:	00 00       	nop
  }
  
  
  if(val & 0x10){
 194:	84 ff       	sbrs	r24, 4
 196:	0b c0       	rjmp	.+22     	; 0x1ae <WS2812B_Send_Byte+0xa4>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 198:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 19a:	00 00       	nop
    asm( "nop ");
 19c:	00 00       	nop
    asm( "nop ");
 19e:	00 00       	nop
    asm( "nop ");
 1a0:	00 00       	nop
    asm( "nop ");
 1a2:	00 00       	nop
    asm( "nop ");
 1a4:	00 00       	nop
	asm( "nop ");
 1a6:	00 00       	nop
    asm( "nop ");
 1a8:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1aa:	5d 98       	cbi	0x0b, 5	; 11
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <WS2812B_Send_Byte+0xb8>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1ae:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1b0:	00 00       	nop
    asm( "nop ");
 1b2:	00 00       	nop
    asm( "nop ");
 1b4:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1b6:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 1b8:	00 00       	nop
	asm( "nop ");
 1ba:	00 00       	nop
    asm( "nop ");
 1bc:	00 00       	nop
    asm( "nop ");
 1be:	00 00       	nop
	asm( "nop ");
 1c0:	00 00       	nop
  }
  
  
  if(val & 0x08){
 1c2:	83 ff       	sbrs	r24, 3
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <WS2812B_Send_Byte+0xd2>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1c6:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1c8:	00 00       	nop
    asm( "nop ");
 1ca:	00 00       	nop
    asm( "nop ");
 1cc:	00 00       	nop
    asm( "nop ");
 1ce:	00 00       	nop
    asm( "nop ");
 1d0:	00 00       	nop
    asm( "nop ");
 1d2:	00 00       	nop
	asm( "nop ");
 1d4:	00 00       	nop
    asm( "nop ");
 1d6:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1d8:	5d 98       	cbi	0x0b, 5	; 11
 1da:	0a c0       	rjmp	.+20     	; 0x1f0 <WS2812B_Send_Byte+0xe6>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1dc:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1de:	00 00       	nop
    asm( "nop ");
 1e0:	00 00       	nop
    asm( "nop ");
 1e2:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1e4:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 1e6:	00 00       	nop
	asm( "nop ");
 1e8:	00 00       	nop
    asm( "nop ");
 1ea:	00 00       	nop
    asm( "nop ");
 1ec:	00 00       	nop
	asm( "nop ");
 1ee:	00 00       	nop
  }
  
  
  if(val & 0x04){
 1f0:	82 ff       	sbrs	r24, 2
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <WS2812B_Send_Byte+0x100>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1f4:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1f6:	00 00       	nop
    asm( "nop ");
 1f8:	00 00       	nop
    asm( "nop ");
 1fa:	00 00       	nop
    asm( "nop ");
 1fc:	00 00       	nop
    asm( "nop ");
 1fe:	00 00       	nop
    asm( "nop ");
 200:	00 00       	nop
	asm( "nop ");
 202:	00 00       	nop
    asm( "nop ");
 204:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 206:	5d 98       	cbi	0x0b, 5	; 11
 208:	0a c0       	rjmp	.+20     	; 0x21e <WS2812B_Send_Byte+0x114>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 20a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 20c:	00 00       	nop
    asm( "nop ");
 20e:	00 00       	nop
    asm( "nop ");
 210:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 212:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 214:	00 00       	nop
	asm( "nop ");
 216:	00 00       	nop
    asm( "nop ");
 218:	00 00       	nop
    asm( "nop ");
 21a:	00 00       	nop
	asm( "nop ");
 21c:	00 00       	nop
  }
  
  
  if(val & 0x02){
 21e:	81 ff       	sbrs	r24, 1
 220:	0b c0       	rjmp	.+22     	; 0x238 <WS2812B_Send_Byte+0x12e>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 222:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 224:	00 00       	nop
    asm( "nop ");
 226:	00 00       	nop
    asm( "nop ");
 228:	00 00       	nop
    asm( "nop ");
 22a:	00 00       	nop
    asm( "nop ");
 22c:	00 00       	nop
    asm( "nop ");
 22e:	00 00       	nop
	asm( "nop ");
 230:	00 00       	nop
    asm( "nop ");
 232:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 234:	5d 98       	cbi	0x0b, 5	; 11
 236:	0a c0       	rjmp	.+20     	; 0x24c <WS2812B_Send_Byte+0x142>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 238:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 23a:	00 00       	nop
    asm( "nop ");
 23c:	00 00       	nop
    asm( "nop ");
 23e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 240:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 242:	00 00       	nop
	asm( "nop ");
 244:	00 00       	nop
    asm( "nop ");
 246:	00 00       	nop
    asm( "nop ");
 248:	00 00       	nop
	asm( "nop ");
 24a:	00 00       	nop
  }
  
  
  if(val & 0x01){
 24c:	80 ff       	sbrs	r24, 0
 24e:	0b c0       	rjmp	.+22     	; 0x266 <WS2812B_Send_Byte+0x15c>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 250:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 252:	00 00       	nop
    asm( "nop ");
 254:	00 00       	nop
    asm( "nop ");
 256:	00 00       	nop
    asm( "nop ");
 258:	00 00       	nop
    asm( "nop ");
 25a:	00 00       	nop
    asm( "nop ");
 25c:	00 00       	nop
	asm( "nop ");
 25e:	00 00       	nop
    asm( "nop ");
 260:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 262:	5d 98       	cbi	0x0b, 5	; 11
 264:	08 95       	ret
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 266:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 268:	00 00       	nop
    asm( "nop ");
 26a:	00 00       	nop
    asm( "nop ");
 26c:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 26e:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 270:	00 00       	nop
	asm( "nop ");
 272:	00 00       	nop
    asm( "nop ");
 274:	00 00       	nop
    asm( "nop ");
 276:	00 00       	nop
	asm( "nop ");
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <WS2812B_Send_Pixel>:
  }
}

void WS2812B_Send_Pixel(uint8_t r, uint8_t g, uint8_t b){
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	18 2f       	mov	r17, r24
 282:	86 2f       	mov	r24, r22
 284:	04 2f       	mov	r16, r20
  WS2812B_Send_Byte(g);
 286:	0e 94 85 00 	call	0x10a	; 0x10a <WS2812B_Send_Byte>
  WS2812B_Send_Byte(r);
 28a:	81 2f       	mov	r24, r17
 28c:	0e 94 85 00 	call	0x10a	; 0x10a <WS2812B_Send_Byte>
  WS2812B_Send_Byte(b);
 290:	80 2f       	mov	r24, r16
 292:	0e 94 85 00 	call	0x10a	; 0x10a <WS2812B_Send_Byte>
}
 296:	1f 91       	pop	r17
 298:	0f 91       	pop	r16
 29a:	08 95       	ret

0000029c <WS2812B_Reset>:

void WS2812B_Reset(void){
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
  for(uint32_t i=0;i<40000;i++){
	asm( "nop ");
 2a0:	00 00       	nop
 2a2:	01 96       	adiw	r24, 0x01	; 1
  WS2812B_Send_Byte(r);
  WS2812B_Send_Byte(b);
}

void WS2812B_Reset(void){
  for(uint32_t i=0;i<40000;i++){
 2a4:	2c e9       	ldi	r18, 0x9C	; 156
 2a6:	80 34       	cpi	r24, 0x40	; 64
 2a8:	92 07       	cpc	r25, r18
 2aa:	d1 f7       	brne	.-12     	; 0x2a0 <WS2812B_Reset+0x4>
	asm( "nop ");
  }
}
 2ac:	08 95       	ret

000002ae <WS2812B_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
 2ae:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
 2b0:	5d 98       	cbi	0x0b, 5	; 11
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
  WS2812B_Send_Byte(b);
}

void WS2812B_Reset(void){
  for(uint32_t i=0;i<40000;i++){
	asm( "nop ");
 2b6:	00 00       	nop
 2b8:	01 96       	adiw	r24, 0x01	; 1
  WS2812B_Send_Byte(r);
  WS2812B_Send_Byte(b);
}

void WS2812B_Reset(void){
  for(uint32_t i=0;i<40000;i++){
 2ba:	2c e9       	ldi	r18, 0x9C	; 156
 2bc:	80 34       	cpi	r24, 0x40	; 64
 2be:	92 07       	cpc	r25, r18
 2c0:	d1 f7       	brne	.-12     	; 0x2b6 <WS2812B_Init+0x8>

  
void WS2812B_Init(void){
  WS2812B_Gpio_Init();
  WS2812B_Reset();
}
 2c2:	08 95       	ret

000002c4 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
 2c4:	10 92 14 01 	sts	0x0114, r1
  debug.datareg=0;
 2c8:	10 92 15 01 	sts	0x0115, r1
  debug.databsy=1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 16 01 	sts	0x0116, r24
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 2d6:	fc 01       	movw	r30, r24
 2d8:	ec 5e       	subi	r30, 0xEC	; 236
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	13 82       	std	Z+3, r1	; 0x03
 2de:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 2e0:	80 32       	cpi	r24, 0x20	; 32
 2e2:	91 05       	cpc	r25, r1
 2e4:	c1 f7       	brne	.-16     	; 0x2d6 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 2e6:	10 92 37 01 	sts	0x0137, r1
 2ea:	e8 e3       	ldi	r30, 0x38	; 56
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
 2ee:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	e0 34       	cpi	r30, 0x40	; 64
 2f4:	f8 07       	cpc	r31, r24
 2f6:	d9 f7       	brne	.-10     	; 0x2ee <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
 2f8:	10 82       	st	Z, r1
}
 2fa:	08 95       	ret

000002fc <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 2fc:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 2fe:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 300:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
 308:	e8 e6       	ldi	r30, 0x68	; 104
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	82 60       	ori	r24, 0x02	; 2
 310:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
 312:	ec e6       	ldi	r30, 0x6C	; 108
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
 31c:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
 31e:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
 320:	08 95       	ret

00000322 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
 326:	ee e6       	ldi	r30, 0x6E	; 110
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	10 82       	st	Z, r1
  TCNT0 =200;
 32c:	88 ec       	ldi	r24, 0xC8	; 200
 32e:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
 338:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
 33a:	08 95       	ret

0000033c <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 33c:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 340:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 342:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 344:	08 95       	ret

00000346 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
 346:	54 9a       	sbi	0x0a, 4	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 348:	5c 9a       	sbi	0x0b, 4	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
 34a:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
 34c:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
 34e:	08 95       	ret

00000350 <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 350:	5c 9a       	sbi	0x0b, 4	; 11
}
 352:	08 95       	ret

00000354 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 354:	5c 98       	cbi	0x0b, 4	; 11
}
 356:	08 95       	ret

00000358 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	11 f4       	brne	.+4      	; 0x360 <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 35c:	5c 9a       	sbi	0x0b, 4	; 11
 35e:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 360:	5c 98       	cbi	0x0b, 4	; 11
 362:	08 95       	ret

00000364 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 364:	86 b1       	in	r24, 0x06	; 6
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	26 e0       	ldi	r18, 0x06	; 6
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	2a 95       	dec	r18
 370:	e1 f7       	brne	.-8      	; 0x36a <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
 372:	81 70       	andi	r24, 0x01	; 1
 374:	08 95       	ret

00000376 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
 376:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
 378:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
 37e:	86 b5       	in	r24, 0x26	; 38
 380:	82 33       	cpi	r24, 0x32	; 50
 382:	e8 f3       	brcs	.-6      	; 0x37e <debug_delay+0x8>
    TCNT0=0;
 384:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
 386:	86 b5       	in	r24, 0x26	; 38
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	82 17       	cp	r24, r18
 38c:	93 07       	cpc	r25, r19
 38e:	d8 f3       	brcs	.-10     	; 0x386 <debug_delay+0x10>
  TCCR0B=0;
 390:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
 392:	08 95       	ret

00000394 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
 394:	80 91 0e 01 	lds	r24, 0x010E
 398:	90 91 0f 01 	lds	r25, 0x010F
 39c:	0e 94 bb 01 	call	0x376	; 0x376 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
 3a0:	08 95       	ret

000003a2 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
 3a2:	80 91 10 01 	lds	r24, 0x0110
 3a6:	90 91 11 01 	lds	r25, 0x0111
 3aa:	0e 94 bb 01 	call	0x376	; 0x376 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
 3ae:	08 95       	ret

000003b0 <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
 3b0:	80 91 12 01 	lds	r24, 0x0112
 3b4:	90 91 13 01 	lds	r25, 0x0113
 3b8:	0e 94 bb 01 	call	0x376	; 0x376 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
 3bc:	08 95       	ret

000003be <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
 3be:	df 92       	push	r13
 3c0:	ef 92       	push	r14
 3c2:	ff 92       	push	r15
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	df 93       	push	r29
 3ca:	cf 93       	push	r28
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	2a 97       	sbiw	r28, 0x0a	; 10
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 3dc:	fe 01       	movw	r30, r28
 3de:	31 96       	adiw	r30, 0x01	; 1
 3e0:	9a e0       	ldi	r25, 0x0A	; 10
 3e2:	df 01       	movw	r26, r30
 3e4:	1d 92       	st	X+, r1
 3e6:	9a 95       	dec	r25
 3e8:	e9 f7       	brne	.-6      	; 0x3e4 <debug_tx_byte+0x26>
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	9a 87       	std	Y+10, r25	; 0x0a
 3ee:	fe 01       	movw	r30, r28
 3f0:	32 96       	adiw	r30, 0x02	; 2
 3f2:	20 e0       	ldi	r18, 0x00	; 0
 3f4:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 3f6:	48 2f       	mov	r20, r24
 3f8:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 3fa:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 3fc:	ca 01       	movw	r24, r20
 3fe:	02 2e       	mov	r0, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <debug_tx_byte+0x48>
 402:	95 95       	asr	r25
 404:	87 95       	ror	r24
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <debug_tx_byte+0x44>
 40a:	80 ff       	sbrs	r24, 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <debug_tx_byte+0x54>
	  buf[i+1]=1;
 40e:	60 83       	st	Z, r22
 410:	01 c0       	rjmp	.+2      	; 0x414 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
 412:	10 82       	st	Z, r1
 414:	2f 5f       	subi	r18, 0xFF	; 255
 416:	3f 4f       	sbci	r19, 0xFF	; 255
 418:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 41a:	28 30       	cpi	r18, 0x08	; 8
 41c:	31 05       	cpc	r19, r1
 41e:	71 f7       	brne	.-36     	; 0x3fc <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 420:	df b6       	in	r13, 0x3f	; 63
  cli();
 422:	f8 94       	cli
 424:	8e 01       	movw	r16, r28
 426:	0f 5f       	subi	r16, 0xFF	; 255
 428:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
 42a:	3b e0       	ldi	r19, 0x0B	; 11
 42c:	e3 2e       	mov	r14, r19
 42e:	f1 2c       	mov	r15, r1
 430:	ec 0e       	add	r14, r28
 432:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
 434:	f8 01       	movw	r30, r16
 436:	80 81       	ld	r24, Z
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	11 f4       	brne	.+4      	; 0x440 <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
 43c:	5c 9a       	sbi	0x0b, 4	; 11
 43e:	01 c0       	rjmp	.+2      	; 0x442 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
 440:	5c 98       	cbi	0x0b, 4	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
 442:	0e 94 ca 01 	call	0x394	; 0x394 <debug_delay_index_0>
 446:	0f 5f       	subi	r16, 0xFF	; 255
 448:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 44a:	0e 15       	cp	r16, r14
 44c:	1f 05       	cpc	r17, r15
 44e:	91 f7       	brne	.-28     	; 0x434 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
 450:	df be       	out	0x3f, r13	; 63
}
 452:	2a 96       	adiw	r28, 0x0a	; 10
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	cf 91       	pop	r28
 460:	df 91       	pop	r29
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	ff 90       	pop	r15
 468:	ef 90       	pop	r14
 46a:	df 90       	pop	r13
 46c:	08 95       	ret

0000046e <debug_rx_byte>:

uint8_t debug_rx_byte(void){
 46e:	ff 92       	push	r15
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 474:	36 9b       	sbis	0x06, 6	; 6
 476:	21 c0       	rjmp	.+66     	; 0x4ba <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	17 c0       	rjmp	.+46     	; 0x4aa <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
 47c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 480:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
 482:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
 484:	17 30       	cpi	r17, 0x07	; 7
 486:	09 f0       	breq	.+2      	; 0x48a <debug_rx_byte+0x1c>
	    val>>=1;
 488:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
 48a:	1f 5f       	subi	r17, 0xFF	; 255
 48c:	18 30       	cpi	r17, 0x08	; 8
 48e:	b1 f7       	brne	.-20     	; 0x47c <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
 490:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 494:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
 496:	f6 fc       	sbrc	r15, 6
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <debug_rx_byte+0x3a>
 49a:	86 ff       	sbrs	r24, 6
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <debug_rx_byte+0x3a>
	  debug.datareg=val;
 49e:	00 93 15 01 	sts	0x0115, r16
	  debug.error=0x00;
 4a2:	10 92 14 01 	sts	0x0114, r1
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 14 01 	sts	0x0114, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
 4ae:	80 91 15 01 	lds	r24, 0x0115
}
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
 4ba:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 4be:	f6 b0       	in	r15, 0x06	; 6
 4c0:	00 e0       	ldi	r16, 0x00	; 0
 4c2:	10 e0       	ldi	r17, 0x00	; 0
 4c4:	db cf       	rjmp	.-74     	; 0x47c <debug_rx_byte+0xe>

000004c6 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
 4c6:	80 91 15 01 	lds	r24, 0x0115
}
 4ca:	08 95       	ret

000004cc <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
 4cc:	10 92 15 01 	sts	0x0115, r1
}
 4d0:	08 95       	ret

000004d2 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
 4d2:	80 93 15 01 	sts	0x0115, r24
}
 4d6:	08 95       	ret

000004d8 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
 4d8:	bf 92       	push	r11
 4da:	cf 92       	push	r12
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	7b 01       	movw	r14, r22
 4ec:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	e8 16       	cp	r14, r24
 4f2:	f1 04       	cpc	r15, r1
 4f4:	01 05       	cpc	r16, r1
 4f6:	11 05       	cpc	r17, r1
 4f8:	09 f0       	breq	.+2      	; 0x4fc <debug_tx_hex+0x24>
 4fa:	30 f4       	brcc	.+12     	; 0x508 <debug_tx_hex+0x30>
 4fc:	c8 e0       	ldi	r28, 0x08	; 8
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
 500:	62 e0       	ldi	r22, 0x02	; 2
 502:	c6 2e       	mov	r12, r22
 504:	d1 2c       	mov	r13, r1
 506:	14 c0       	rjmp	.+40     	; 0x530 <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	e8 16       	cp	r14, r24
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	f8 06       	cpc	r15, r24
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 07       	cpc	r16, r24
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	18 07       	cpc	r17, r24
 518:	30 f0       	brcs	.+12     	; 0x526 <debug_tx_hex+0x4e>
 51a:	c0 e2       	ldi	r28, 0x20	; 32
 51c:	d0 e0       	ldi	r29, 0x00	; 0
 51e:	58 e0       	ldi	r21, 0x08	; 8
 520:	c5 2e       	mov	r12, r21
 522:	d1 2c       	mov	r13, r1
 524:	05 c0       	rjmp	.+10     	; 0x530 <debug_tx_hex+0x58>
 526:	c0 e1       	ldi	r28, 0x10	; 16
 528:	d0 e0       	ldi	r29, 0x00	; 0
 52a:	44 e0       	ldi	r20, 0x04	; 4
 52c:	c4 2e       	mov	r12, r20
 52e:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
 530:	80 e3       	ldi	r24, 0x30	; 48
 532:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
  debug_tx_byte('x');
 536:	88 e7       	ldi	r24, 0x78	; 120
 538:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
 53c:	bb 24       	eor	r11, r11
 53e:	17 c0       	rjmp	.+46     	; 0x56e <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 540:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 542:	d8 01       	movw	r26, r16
 544:	c7 01       	movw	r24, r14
 546:	0c 2e       	mov	r0, r28
 548:	04 c0       	rjmp	.+8      	; 0x552 <debug_tx_hex+0x7a>
 54a:	b6 95       	lsr	r27
 54c:	a7 95       	ror	r26
 54e:	97 95       	ror	r25
 550:	87 95       	ror	r24
 552:	0a 94       	dec	r0
 554:	d2 f7       	brpl	.-12     	; 0x54a <debug_tx_hex+0x72>
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	8f 70       	andi	r24, 0x0F	; 15
 55a:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 55c:	8a 30       	cpi	r24, 0x0A	; 10
 55e:	91 05       	cpc	r25, r1
 560:	10 f0       	brcs	.+4      	; 0x566 <debug_tx_hex+0x8e>
	    hex_digit+=55;
 562:	c7 96       	adiw	r24, 0x37	; 55
 564:	01 c0       	rjmp	.+2      	; 0x568 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
 566:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
 568:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 56c:	b3 94       	inc	r11
 56e:	8b 2d       	mov	r24, r11
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	8c 15       	cp	r24, r12
 574:	9d 05       	cpc	r25, r13
 576:	20 f3       	brcs	.-56     	; 0x540 <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	df 90       	pop	r13
 586:	cf 90       	pop	r12
 588:	bf 90       	pop	r11
 58a:	08 95       	ret

0000058c <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
 58c:	af 92       	push	r10
 58e:	bf 92       	push	r11
 590:	cf 92       	push	r12
 592:	df 92       	push	r13
 594:	ef 92       	push	r14
 596:	ff 92       	push	r15
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	7b 01       	movw	r14, r22
 5a2:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 5a4:	6f 3f       	cpi	r22, 0xFF	; 255
 5a6:	71 05       	cpc	r23, r1
 5a8:	81 05       	cpc	r24, r1
 5aa:	91 05       	cpc	r25, r1
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <debug_tx_bin+0x24>
 5ae:	18 f4       	brcc	.+6      	; 0x5b6 <debug_tx_bin+0x2a>
 5b0:	f7 e0       	ldi	r31, 0x07	; 7
 5b2:	df 2e       	mov	r13, r31
 5b4:	0d c0       	rjmp	.+26     	; 0x5d0 <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 5b6:	60 30       	cpi	r22, 0x00	; 0
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	73 07       	cpc	r23, r19
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	83 07       	cpc	r24, r19
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	93 07       	cpc	r25, r19
 5c4:	18 f0       	brcs	.+6      	; 0x5cc <debug_tx_bin+0x40>
 5c6:	ef e1       	ldi	r30, 0x1F	; 31
 5c8:	de 2e       	mov	r13, r30
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <debug_tx_bin+0x44>
 5cc:	7f e0       	ldi	r23, 0x0F	; 15
 5ce:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
 5d0:	80 e3       	ldi	r24, 0x30	; 48
 5d2:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
  debug_tx_byte('b');
 5d6:	82 e6       	ldi	r24, 0x62	; 98
 5d8:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
 5dc:	c0 e0       	ldi	r28, 0x00	; 0
 5de:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
 5e0:	cd 2c       	mov	r12, r13
 5e2:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 5e4:	56 01       	movw	r10, r12
 5e6:	08 94       	sec
 5e8:	a1 1c       	adc	r10, r1
 5ea:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 5ec:	c6 01       	movw	r24, r12
 5ee:	8c 1b       	sub	r24, r28
 5f0:	9d 0b       	sbc	r25, r29
 5f2:	a8 01       	movw	r20, r16
 5f4:	97 01       	movw	r18, r14
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <debug_tx_bin+0x74>
 5f8:	56 95       	lsr	r21
 5fa:	47 95       	ror	r20
 5fc:	37 95       	ror	r19
 5fe:	27 95       	ror	r18
 600:	8a 95       	dec	r24
 602:	d2 f7       	brpl	.-12     	; 0x5f8 <debug_tx_bin+0x6c>
 604:	da 01       	movw	r26, r20
 606:	c9 01       	movw	r24, r18
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	90 70       	andi	r25, 0x00	; 0
 60c:	89 2b       	or	r24, r25
 60e:	11 f0       	breq	.+4      	; 0x614 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
 610:	81 e3       	ldi	r24, 0x31	; 49
 612:	01 c0       	rjmp	.+2      	; 0x616 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
 614:	80 e3       	ldi	r24, 0x30	; 48
 616:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
 61a:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
 61c:	ca 15       	cp	r28, r10
 61e:	db 05       	cpc	r29, r11
 620:	29 f7       	brne	.-54     	; 0x5ec <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	df 90       	pop	r13
 630:	cf 90       	pop	r12
 632:	bf 90       	pop	r11
 634:	af 90       	pop	r10
 636:	08 95       	ret

00000638 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
 638:	8d e0       	ldi	r24, 0x0D	; 13
 63a:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
  debug_tx_byte('\n');
 63e:	8a e0       	ldi	r24, 0x0A	; 10
 640:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
}
 644:	08 95       	ret

00000646 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
 646:	80 e2       	ldi	r24, 0x20	; 32
 648:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
}
 64c:	08 95       	ret

0000064e <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
 64e:	8c e2       	ldi	r24, 0x2C	; 44
 650:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
}
 654:	08 95       	ret

00000656 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	ec 01       	movw	r28, r24
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	03 c0       	rjmp	.+6      	; 0x668 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
 662:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
        i++;
 666:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 668:	fe 01       	movw	r30, r28
 66a:	e1 0f       	add	r30, r17
 66c:	f1 1d       	adc	r31, r1
 66e:	80 81       	ld	r24, Z
 670:	88 23       	and	r24, r24
 672:	b9 f7       	brne	.-18     	; 0x662 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	08 95       	ret

0000067c <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
 67c:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_nl();
 680:	0e 94 1c 03 	call	0x638	; 0x638 <debug_tx_nl>
}
 684:	08 95       	ret

00000686 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
 686:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 68a:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
}
 68e:	08 95       	ret

00000690 <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
 690:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_cm();
 694:	0e 94 27 03 	call	0x64e	; 0x64e <debug_tx_cm>
}
 698:	08 95       	ret

0000069a <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
 69a:	bf 92       	push	r11
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	6b 01       	movw	r12, r22
 6aa:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 6ac:	61 15       	cp	r22, r1
 6ae:	71 05       	cpc	r23, r1
 6b0:	81 05       	cpc	r24, r1
 6b2:	91 05       	cpc	r25, r1
 6b4:	31 f4       	brne	.+12     	; 0x6c2 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
 6b6:	10 92 38 01 	sts	0x0138, r1
    debug.input_num_digits=1;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	80 93 40 01 	sts	0x0140, r24
 6c0:	23 c0       	rjmp	.+70     	; 0x708 <debug_determine_digit_numbers+0x6e>
 6c2:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 6c4:	0b 2d       	mov	r16, r11
 6c6:	10 e0       	ldi	r17, 0x00	; 0
 6c8:	0c 5e       	subi	r16, 0xEC	; 236
 6ca:	1e 4f       	sbci	r17, 0xFE	; 254
 6cc:	c7 01       	movw	r24, r14
 6ce:	b6 01       	movw	r22, r12
 6d0:	2a e0       	ldi	r18, 0x0A	; 10
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	0e 94 4c 05 	call	0xa98	; 0xa98 <__udivmodsi4>
 6dc:	f8 01       	movw	r30, r16
 6de:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
 6e0:	c7 01       	movw	r24, r14
 6e2:	b6 01       	movw	r22, r12
 6e4:	2a e0       	ldi	r18, 0x0A	; 10
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	40 e0       	ldi	r20, 0x00	; 0
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	0e 94 4c 05 	call	0xa98	; 0xa98 <__udivmodsi4>
 6f0:	c9 01       	movw	r24, r18
 6f2:	da 01       	movw	r26, r20
 6f4:	6c 01       	movw	r12, r24
 6f6:	7d 01       	movw	r14, r26
      i++;
 6f8:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 6fa:	c1 14       	cp	r12, r1
 6fc:	d1 04       	cpc	r13, r1
 6fe:	e1 04       	cpc	r14, r1
 700:	f1 04       	cpc	r15, r1
 702:	01 f7       	brne	.-64     	; 0x6c4 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 704:	b0 92 40 01 	sts	0x0140, r11
  }
}
 708:	1f 91       	pop	r17
 70a:	0f 91       	pop	r16
 70c:	ff 90       	pop	r15
 70e:	ef 90       	pop	r14
 710:	df 90       	pop	r13
 712:	cf 90       	pop	r12
 714:	bf 90       	pop	r11
 716:	08 95       	ret

00000718 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
 718:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 71a:	10 91 40 01 	lds	r17, 0x0140
 71e:	09 c0       	rjmp	.+18     	; 0x732 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 720:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 722:	e1 2f       	mov	r30, r17
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	ec 5e       	subi	r30, 0xEC	; 236
 728:	fe 4f       	sbci	r31, 0xFE	; 254
 72a:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
 72c:	80 5d       	subi	r24, 0xD0	; 208
 72e:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 732:	11 23       	and	r17, r17
 734:	a9 f7       	brne	.-22     	; 0x720 <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
 736:	1f 91       	pop	r17
 738:	08 95       	ret

0000073a <debug_tx_number>:

void debug_tx_number(int32_t num){
 73a:	ef 92       	push	r14
 73c:	ff 92       	push	r15
 73e:	0f 93       	push	r16
 740:	1f 93       	push	r17
 742:	7b 01       	movw	r14, r22
 744:	8c 01       	movw	r16, r24
  if(num<0){
 746:	97 ff       	sbrs	r25, 7
 748:	0b c0       	rjmp	.+22     	; 0x760 <debug_tx_number+0x26>
    debug_tx_byte('-');
 74a:	8d e2       	ldi	r24, 0x2D	; 45
 74c:	0e 94 df 01 	call	0x3be	; 0x3be <debug_tx_byte>
	num=-num;
 750:	10 95       	com	r17
 752:	00 95       	com	r16
 754:	f0 94       	com	r15
 756:	e0 94       	com	r14
 758:	e1 1c       	adc	r14, r1
 75a:	f1 1c       	adc	r15, r1
 75c:	01 1d       	adc	r16, r1
 75e:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
 760:	c8 01       	movw	r24, r16
 762:	b7 01       	movw	r22, r14
 764:	0e 94 4d 03 	call	0x69a	; 0x69a <debug_determine_digit_numbers>
  debug_tx_number_digits();
 768:	0e 94 8c 03 	call	0x718	; 0x718 <debug_tx_number_digits>
}
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	ff 90       	pop	r15
 772:	ef 90       	pop	r14
 774:	08 95       	ret

00000776 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
 776:	0e 94 9d 03 	call	0x73a	; 0x73a <debug_tx_number>
  debug_tx_nl();
 77a:	0e 94 1c 03 	call	0x638	; 0x638 <debug_tx_nl>
}
 77e:	08 95       	ret

00000780 <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
 780:	0e 94 9d 03 	call	0x73a	; 0x73a <debug_tx_number>
  debug_tx_sp();
 784:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
}
 788:	08 95       	ret

0000078a <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
 78a:	0e 94 9d 03 	call	0x73a	; 0x73a <debug_tx_number>
  debug_tx_text(",");
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
}
 796:	08 95       	ret

00000798 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
 798:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <debug_tx_hex>
  debug_tx_nl();
 79c:	0e 94 1c 03 	call	0x638	; 0x638 <debug_tx_nl>
}
 7a0:	08 95       	ret

000007a2 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
 7a2:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <debug_tx_hex>
  debug_tx_sp();
 7a6:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
}
 7aa:	08 95       	ret

000007ac <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
 7ac:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <debug_tx_hex>
  debug_tx_text(",");
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	91 e0       	ldi	r25, 0x01	; 1
 7b4:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
}
 7b8:	08 95       	ret

000007ba <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
 7ba:	0e 94 c6 02 	call	0x58c	; 0x58c <debug_tx_bin>
  debug_tx_nl();
 7be:	0e 94 1c 03 	call	0x638	; 0x638 <debug_tx_nl>
}
 7c2:	08 95       	ret

000007c4 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
 7c4:	0e 94 c6 02 	call	0x58c	; 0x58c <debug_tx_bin>
  debug_tx_sp();
 7c8:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
}
 7cc:	08 95       	ret

000007ce <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
 7ce:	0e 94 c6 02 	call	0x58c	; 0x58c <debug_tx_bin>
  debug_tx_text(",");
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
}
 7da:	08 95       	ret

000007dc <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
 7dc:	ef 92       	push	r14
 7de:	ff 92       	push	r15
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	7a 01       	movw	r14, r20
 7e6:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 7e8:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 7ec:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_nl(num);
 7f0:	c8 01       	movw	r24, r16
 7f2:	b7 01       	movw	r22, r14
 7f4:	0e 94 bb 03 	call	0x776	; 0x776 <debug_tx_number_nl>
}
 7f8:	1f 91       	pop	r17
 7fa:	0f 91       	pop	r16
 7fc:	ff 90       	pop	r15
 7fe:	ef 90       	pop	r14
 800:	08 95       	ret

00000802 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
 802:	ef 92       	push	r14
 804:	ff 92       	push	r15
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	7a 01       	movw	r14, r20
 80c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 80e:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 812:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_sp(num);
 816:	c8 01       	movw	r24, r16
 818:	b7 01       	movw	r22, r14
 81a:	0e 94 c0 03 	call	0x780	; 0x780 <debug_tx_number_sp>
}
 81e:	1f 91       	pop	r17
 820:	0f 91       	pop	r16
 822:	ff 90       	pop	r15
 824:	ef 90       	pop	r14
 826:	08 95       	ret

00000828 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
 828:	ef 92       	push	r14
 82a:	ff 92       	push	r15
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	7a 01       	movw	r14, r20
 832:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 834:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 838:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_cm(num);
 83c:	c8 01       	movw	r24, r16
 83e:	b7 01       	movw	r22, r14
 840:	0e 94 c5 03 	call	0x78a	; 0x78a <debug_tx_number_cm>
}
 844:	1f 91       	pop	r17
 846:	0f 91       	pop	r16
 848:	ff 90       	pop	r15
 84a:	ef 90       	pop	r14
 84c:	08 95       	ret

0000084e <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
 84e:	ef 92       	push	r14
 850:	ff 92       	push	r15
 852:	0f 93       	push	r16
 854:	1f 93       	push	r17
 856:	7a 01       	movw	r14, r20
 858:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 85a:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 85e:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
 862:	c8 01       	movw	r24, r16
 864:	b7 01       	movw	r22, r14
 866:	0e 94 cc 03 	call	0x798	; 0x798 <debug_tx_number_hex_nl>
}
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	08 95       	ret

00000874 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
 874:	ef 92       	push	r14
 876:	ff 92       	push	r15
 878:	0f 93       	push	r16
 87a:	1f 93       	push	r17
 87c:	7a 01       	movw	r14, r20
 87e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 880:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 884:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
 888:	c8 01       	movw	r24, r16
 88a:	b7 01       	movw	r22, r14
 88c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <debug_tx_number_hex_sp>
}
 890:	1f 91       	pop	r17
 892:	0f 91       	pop	r16
 894:	ff 90       	pop	r15
 896:	ef 90       	pop	r14
 898:	08 95       	ret

0000089a <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	7a 01       	movw	r14, r20
 8a4:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 8a6:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 8aa:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
 8ae:	c8 01       	movw	r24, r16
 8b0:	b7 01       	movw	r22, r14
 8b2:	0e 94 d6 03 	call	0x7ac	; 0x7ac <debug_tx_number_hex_cm>
}
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	ff 90       	pop	r15
 8bc:	ef 90       	pop	r14
 8be:	08 95       	ret

000008c0 <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
 8c0:	ef 92       	push	r14
 8c2:	ff 92       	push	r15
 8c4:	0f 93       	push	r16
 8c6:	1f 93       	push	r17
 8c8:	7a 01       	movw	r14, r20
 8ca:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 8cc:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 8d0:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
 8d4:	c8 01       	movw	r24, r16
 8d6:	b7 01       	movw	r22, r14
 8d8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <debug_tx_number_bin_nl>
}
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	08 95       	ret

000008e6 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	7a 01       	movw	r14, r20
 8f0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 8f2:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 8f6:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
 8fa:	c8 01       	movw	r24, r16
 8fc:	b7 01       	movw	r22, r14
 8fe:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <debug_tx_number_bin_sp>
}
 902:	1f 91       	pop	r17
 904:	0f 91       	pop	r16
 906:	ff 90       	pop	r15
 908:	ef 90       	pop	r14
 90a:	08 95       	ret

0000090c <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
 90c:	ef 92       	push	r14
 90e:	ff 92       	push	r15
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	7a 01       	movw	r14, r20
 916:	8b 01       	movw	r16, r22
  debug_tx_text(name);
 918:	0e 94 2b 03 	call	0x656	; 0x656 <debug_tx_text>
  debug_tx_sp();
 91c:	0e 94 23 03 	call	0x646	; 0x646 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
 920:	c8 01       	movw	r24, r16
 922:	b7 01       	movw	r22, r14
 924:	0e 94 e7 03 	call	0x7ce	; 0x7ce <debug_tx_number_bin_cm>
}
 928:	1f 91       	pop	r17
 92a:	0f 91       	pop	r16
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	08 95       	ret

00000932 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
 932:	e4 e1       	ldi	r30, 0x14	; 20
 934:	f1 e0       	ldi	r31, 0x01	; 1
 936:	e8 0f       	add	r30, r24
 938:	f1 1d       	adc	r31, r1
 93a:	83 81       	ldd	r24, Z+3	; 0x03
}
 93c:	08 95       	ret

0000093e <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 93e:	80 91 37 01 	lds	r24, 0x0137
}
 942:	08 95       	ret

00000944 <debug_flush_buf>:

void debug_flush_buf(void){
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
 948:	fc 01       	movw	r30, r24
 94a:	ec 5e       	subi	r30, 0xEC	; 236
 94c:	fe 4f       	sbci	r31, 0xFE	; 254
 94e:	13 82       	std	Z+3, r1	; 0x03
 950:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
 952:	80 32       	cpi	r24, 0x20	; 32
 954:	91 05       	cpc	r25, r1
 956:	c1 f7       	brne	.-16     	; 0x948 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
 958:	10 92 37 01 	sts	0x0137, r1
}
 95c:	08 95       	ret

0000095e <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
 95e:	80 91 16 01 	lds	r24, 0x0116
}
 962:	08 95       	ret

00000964 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
 964:	80 91 16 01 	lds	r24, 0x0116
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
 968:	88 23       	and	r24, r24
 96a:	11 f0       	breq	.+4      	; 0x970 <debug_data_available_rx_buf+0xc>
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	08 c0       	rjmp	.+16     	; 0x980 <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 970:	80 91 37 01 	lds	r24, 0x0137
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	88 23       	and	r24, r24
 978:	09 f4       	brne	.+2      	; 0x97c <debug_data_available_rx_buf+0x18>
 97a:	91 e0       	ldi	r25, 0x01	; 1
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
 980:	89 2f       	mov	r24, r25
 982:	08 95       	ret

00000984 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
 984:	80 91 37 01 	lds	r24, 0x0137
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
 988:	08 95       	ret

0000098a <debug_init>:

void debug_init(void){
  debug_struct_init();
 98a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <debug_struct_init>
  debug_timings_init();
 98e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <debug_timings_init>
  debug_gpio_init();
 992:	0e 94 a3 01 	call	0x346	; 0x346 <debug_gpio_init>
}
 996:	08 95       	ret

00000998 <__vector_4>:


ISR(ISR_PCINT_VECT){
 998:	1f 92       	push	r1
 99a:	0f 92       	push	r0
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	0f 92       	push	r0
 9a0:	11 24       	eor	r1, r1
 9a2:	2f 93       	push	r18
 9a4:	3f 93       	push	r19
 9a6:	4f 93       	push	r20
 9a8:	5f 93       	push	r21
 9aa:	6f 93       	push	r22
 9ac:	7f 93       	push	r23
 9ae:	8f 93       	push	r24
 9b0:	9f 93       	push	r25
 9b2:	af 93       	push	r26
 9b4:	bf 93       	push	r27
 9b6:	ef 93       	push	r30
 9b8:	ff 93       	push	r31
  debug.databsy=1;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	80 93 16 01 	sts	0x0116, r24
  uint8_t val=debug_rx_byte();
 9c0:	0e 94 37 02 	call	0x46e	; 0x46e <debug_rx_byte>
 9c4:	98 2f       	mov	r25, r24
  if(debug.error==0){
 9c6:	80 91 14 01 	lds	r24, 0x0114
 9ca:	88 23       	and	r24, r24
 9cc:	99 f4       	brne	.+38     	; 0x9f4 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
 9ce:	e0 91 37 01 	lds	r30, 0x0137
 9d2:	f0 e0       	ldi	r31, 0x00	; 0
 9d4:	ec 5e       	subi	r30, 0xEC	; 236
 9d6:	fe 4f       	sbci	r31, 0xFE	; 254
 9d8:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
 9da:	80 91 37 01 	lds	r24, 0x0137
 9de:	8f 5f       	subi	r24, 0xFF	; 255
 9e0:	80 93 37 01 	sts	0x0137, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
 9e4:	80 91 37 01 	lds	r24, 0x0137
 9e8:	81 32       	cpi	r24, 0x21	; 33
 9ea:	10 f0       	brcs	.+4      	; 0x9f0 <__vector_4+0x58>
	  debug.bufindex=0;
 9ec:	10 92 37 01 	sts	0x0137, r1
	}
    debug_timer_start();
 9f0:	0e 94 91 01 	call	0x322	; 0x322 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
 9f4:	ff 91       	pop	r31
 9f6:	ef 91       	pop	r30
 9f8:	bf 91       	pop	r27
 9fa:	af 91       	pop	r26
 9fc:	9f 91       	pop	r25
 9fe:	8f 91       	pop	r24
 a00:	7f 91       	pop	r23
 a02:	6f 91       	pop	r22
 a04:	5f 91       	pop	r21
 a06:	4f 91       	pop	r20
 a08:	3f 91       	pop	r19
 a0a:	2f 91       	pop	r18
 a0c:	0f 90       	pop	r0
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	0f 90       	pop	r0
 a12:	1f 90       	pop	r1
 a14:	18 95       	reti

00000a16 <__vector_16>:

ISR(TIMER_OVF_VECT){
 a16:	1f 92       	push	r1
 a18:	0f 92       	push	r0
 a1a:	0f b6       	in	r0, 0x3f	; 63
 a1c:	0f 92       	push	r0
 a1e:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 a20:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 a24:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 a26:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
 a28:	10 92 16 01 	sts	0x0116, r1
}
 a2c:	0f 90       	pop	r0
 a2e:	0f be       	out	0x3f, r0	; 63
 a30:	0f 90       	pop	r0
 a32:	1f 90       	pop	r1
 a34:	18 95       	reti

00000a36 <Display_Init>:
}display_t;

display_t Display;

void Display_Init(void){
  Display.Red=0;
 a36:	10 92 41 01 	sts	0x0141, r1
  Display.Green=1;
 a3a:	81 e0       	ldi	r24, 0x01	; 1
 a3c:	80 93 42 01 	sts	0x0142, r24
  Display.Blue=0;
 a40:	10 92 43 01 	sts	0x0143, r1
  Display.Pos=0;
 a44:	10 92 44 01 	sts	0x0144, r1
}
 a48:	08 95       	ret

00000a4a <Display_Send_Row>:

void Display_Send_Row(uint8_t val){
 a4a:	0f 93       	push	r16
 a4c:	1f 93       	push	r17
 a4e:	cf 93       	push	r28
 a50:	df 93       	push	r29
 a52:	c7 e0       	ldi	r28, 0x07	; 7
 a54:	d0 e0       	ldi	r29, 0x00	; 0
  for(int i=7;i>=0;i--){
    if(val & (1<<i)){
 a56:	08 2f       	mov	r16, r24
 a58:	10 e0       	ldi	r17, 0x00	; 0
 a5a:	c8 01       	movw	r24, r16
 a5c:	0c 2e       	mov	r0, r28
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <Display_Send_Row+0x1a>
 a60:	95 95       	asr	r25
 a62:	87 95       	ror	r24
 a64:	0a 94       	dec	r0
 a66:	e2 f7       	brpl	.-8      	; 0xa60 <Display_Send_Row+0x16>
 a68:	80 ff       	sbrs	r24, 0
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <Display_Send_Row+0x30>
      WS2812B_Send_Pixel(Display.Red, Display.Green, Display.Blue);
 a6c:	80 91 41 01 	lds	r24, 0x0141
 a70:	60 91 42 01 	lds	r22, 0x0142
 a74:	40 91 43 01 	lds	r20, 0x0143
 a78:	03 c0       	rjmp	.+6      	; 0xa80 <Display_Send_Row+0x36>
    }else{
      WS2812B_Send_Pixel(0, 0, 0);
 a7a:	80 e0       	ldi	r24, 0x00	; 0
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	40 e0       	ldi	r20, 0x00	; 0
 a80:	0e 94 3e 01 	call	0x27c	; 0x27c <WS2812B_Send_Pixel>
  Display.Blue=0;
  Display.Pos=0;
}

void Display_Send_Row(uint8_t val){
  for(int i=7;i>=0;i--){
 a84:	21 97       	sbiw	r28, 0x01	; 1
 a86:	8f ef       	ldi	r24, 0xFF	; 255
 a88:	cf 3f       	cpi	r28, 0xFF	; 255
 a8a:	d8 07       	cpc	r29, r24
 a8c:	31 f7       	brne	.-52     	; 0xa5a <Display_Send_Row+0x10>
      WS2812B_Send_Pixel(Display.Red, Display.Green, Display.Blue);
    }else{
      WS2812B_Send_Pixel(0, 0, 0);
    }
  }
 a8e:	df 91       	pop	r29
 a90:	cf 91       	pop	r28
 a92:	1f 91       	pop	r17
 a94:	0f 91       	pop	r16
 a96:	08 95       	ret

00000a98 <__udivmodsi4>:
 a98:	a1 e2       	ldi	r26, 0x21	; 33
 a9a:	1a 2e       	mov	r1, r26
 a9c:	aa 1b       	sub	r26, r26
 a9e:	bb 1b       	sub	r27, r27
 aa0:	fd 01       	movw	r30, r26
 aa2:	0d c0       	rjmp	.+26     	; 0xabe <__udivmodsi4_ep>

00000aa4 <__udivmodsi4_loop>:
 aa4:	aa 1f       	adc	r26, r26
 aa6:	bb 1f       	adc	r27, r27
 aa8:	ee 1f       	adc	r30, r30
 aaa:	ff 1f       	adc	r31, r31
 aac:	a2 17       	cp	r26, r18
 aae:	b3 07       	cpc	r27, r19
 ab0:	e4 07       	cpc	r30, r20
 ab2:	f5 07       	cpc	r31, r21
 ab4:	20 f0       	brcs	.+8      	; 0xabe <__udivmodsi4_ep>
 ab6:	a2 1b       	sub	r26, r18
 ab8:	b3 0b       	sbc	r27, r19
 aba:	e4 0b       	sbc	r30, r20
 abc:	f5 0b       	sbc	r31, r21

00000abe <__udivmodsi4_ep>:
 abe:	66 1f       	adc	r22, r22
 ac0:	77 1f       	adc	r23, r23
 ac2:	88 1f       	adc	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	1a 94       	dec	r1
 ac8:	69 f7       	brne	.-38     	; 0xaa4 <__udivmodsi4_loop>
 aca:	60 95       	com	r22
 acc:	70 95       	com	r23
 ace:	80 95       	com	r24
 ad0:	90 95       	com	r25
 ad2:	9b 01       	movw	r18, r22
 ad4:	ac 01       	movw	r20, r24
 ad6:	bd 01       	movw	r22, r26
 ad8:	cf 01       	movw	r24, r30
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
