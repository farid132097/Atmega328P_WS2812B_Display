
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001494  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000080  00800132  00800132  0000155a  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000088b  00000000  00000000  000015da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a89  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  000038ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b0a  00000000  00000000  00003f71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  00005a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000887  00000000  00000000  00005f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000131b  00000000  00000000  00006823  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  00007b3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e9       	ldi	r30, 0x94	; 148
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3b       	cpi	r26, 0xB2	; 178
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
  0x00,0x10,0x20
};

uint8_t color_index=0, red_val=0, green_val=0, blue_val=0;

int main(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29

  WS2812B_Init();
      aa:	0e 94 3c 01 	call	0x278	; 0x278 <WS2812B_Init>
  RGB_Animation_Init();
      ae:	0e 94 3b 06 	call	0xc76	; 0xc76 <RGB_Animation_Init>
  debug_init();
      b2:	0e 94 c4 09 	call	0x1388	; 0x1388 <debug_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      b6:	cc e2       	ldi	r28, 0x2C	; 44
      b8:	d1 e0       	ldi	r29, 0x01	; 1
	color_index++;
	if(color_index>=TOTAL_COLOR_LOOP){
	  color_index=0;
	}*/
	
	RGB_Animation_Rotate_All_Color();
      ba:	0e 94 5d 02 	call	0x4ba	; 0x4ba <RGB_Animation_Rotate_All_Color>
      be:	88 ee       	ldi	r24, 0xE8	; 232
      c0:	93 e0       	ldi	r25, 0x03	; 3
      c2:	fe 01       	movw	r30, r28
      c4:	31 97       	sbiw	r30, 0x01	; 1
      c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ca:	d9 f7       	brne	.-10     	; 0xc2 <main+0x1c>
      cc:	f6 cf       	rjmp	.-20     	; 0xba <main+0x14>

000000ce <WS2812B_Gpio_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
      ce:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
      d0:	5d 98       	cbi	0x0b, 5	; 11
}
      d2:	08 95       	ret

000000d4 <WS2812B_Send_Byte>:

void WS2812B_Send_Byte(uint8_t val){
  if(val & 0x80){
      d4:	87 ff       	sbrs	r24, 7
      d6:	0b c0       	rjmp	.+22     	; 0xee <WS2812B_Send_Byte+0x1a>
	WS2812B_PORT |=  (1<<WS2812B_bp);
      d8:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
      da:	00 00       	nop
    asm( "nop ");
      dc:	00 00       	nop
    asm( "nop ");
      de:	00 00       	nop
    asm( "nop ");
      e0:	00 00       	nop
    asm( "nop ");
      e2:	00 00       	nop
    asm( "nop ");
      e4:	00 00       	nop
	asm( "nop ");
      e6:	00 00       	nop
    asm( "nop ");
      e8:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
      ea:	5d 98       	cbi	0x0b, 5	; 11
      ec:	0a c0       	rjmp	.+20     	; 0x102 <WS2812B_Send_Byte+0x2e>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
      ee:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
      f0:	00 00       	nop
    asm( "nop ");
      f2:	00 00       	nop
    asm( "nop ");
      f4:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
      f6:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
      f8:	00 00       	nop
	asm( "nop ");
      fa:	00 00       	nop
    asm( "nop ");
      fc:	00 00       	nop
    asm( "nop ");
      fe:	00 00       	nop
	asm( "nop ");
     100:	00 00       	nop
  }
  
  
  if(val & 0x40){
     102:	86 ff       	sbrs	r24, 6
     104:	0b c0       	rjmp	.+22     	; 0x11c <WS2812B_Send_Byte+0x48>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     106:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     108:	00 00       	nop
    asm( "nop ");
     10a:	00 00       	nop
    asm( "nop ");
     10c:	00 00       	nop
    asm( "nop ");
     10e:	00 00       	nop
    asm( "nop ");
     110:	00 00       	nop
    asm( "nop ");
     112:	00 00       	nop
	asm( "nop ");
     114:	00 00       	nop
    asm( "nop ");
     116:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     118:	5d 98       	cbi	0x0b, 5	; 11
     11a:	0a c0       	rjmp	.+20     	; 0x130 <WS2812B_Send_Byte+0x5c>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     11c:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     11e:	00 00       	nop
    asm( "nop ");
     120:	00 00       	nop
    asm( "nop ");
     122:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     124:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     126:	00 00       	nop
	asm( "nop ");
     128:	00 00       	nop
    asm( "nop ");
     12a:	00 00       	nop
    asm( "nop ");
     12c:	00 00       	nop
	asm( "nop ");
     12e:	00 00       	nop
  }
  
  
  if(val & 0x20){
     130:	85 ff       	sbrs	r24, 5
     132:	0b c0       	rjmp	.+22     	; 0x14a <WS2812B_Send_Byte+0x76>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     134:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     136:	00 00       	nop
    asm( "nop ");
     138:	00 00       	nop
    asm( "nop ");
     13a:	00 00       	nop
    asm( "nop ");
     13c:	00 00       	nop
    asm( "nop ");
     13e:	00 00       	nop
    asm( "nop ");
     140:	00 00       	nop
	asm( "nop ");
     142:	00 00       	nop
    asm( "nop ");
     144:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     146:	5d 98       	cbi	0x0b, 5	; 11
     148:	0a c0       	rjmp	.+20     	; 0x15e <WS2812B_Send_Byte+0x8a>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     14a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     14c:	00 00       	nop
    asm( "nop ");
     14e:	00 00       	nop
    asm( "nop ");
     150:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     152:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     154:	00 00       	nop
	asm( "nop ");
     156:	00 00       	nop
    asm( "nop ");
     158:	00 00       	nop
    asm( "nop ");
     15a:	00 00       	nop
	asm( "nop ");
     15c:	00 00       	nop
  }
  
  
  if(val & 0x10){
     15e:	84 ff       	sbrs	r24, 4
     160:	0b c0       	rjmp	.+22     	; 0x178 <WS2812B_Send_Byte+0xa4>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     162:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     164:	00 00       	nop
    asm( "nop ");
     166:	00 00       	nop
    asm( "nop ");
     168:	00 00       	nop
    asm( "nop ");
     16a:	00 00       	nop
    asm( "nop ");
     16c:	00 00       	nop
    asm( "nop ");
     16e:	00 00       	nop
	asm( "nop ");
     170:	00 00       	nop
    asm( "nop ");
     172:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     174:	5d 98       	cbi	0x0b, 5	; 11
     176:	0a c0       	rjmp	.+20     	; 0x18c <WS2812B_Send_Byte+0xb8>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     178:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     17a:	00 00       	nop
    asm( "nop ");
     17c:	00 00       	nop
    asm( "nop ");
     17e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     180:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     182:	00 00       	nop
	asm( "nop ");
     184:	00 00       	nop
    asm( "nop ");
     186:	00 00       	nop
    asm( "nop ");
     188:	00 00       	nop
	asm( "nop ");
     18a:	00 00       	nop
  }
  
  
  if(val & 0x08){
     18c:	83 ff       	sbrs	r24, 3
     18e:	0b c0       	rjmp	.+22     	; 0x1a6 <WS2812B_Send_Byte+0xd2>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     190:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     192:	00 00       	nop
    asm( "nop ");
     194:	00 00       	nop
    asm( "nop ");
     196:	00 00       	nop
    asm( "nop ");
     198:	00 00       	nop
    asm( "nop ");
     19a:	00 00       	nop
    asm( "nop ");
     19c:	00 00       	nop
	asm( "nop ");
     19e:	00 00       	nop
    asm( "nop ");
     1a0:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1a2:	5d 98       	cbi	0x0b, 5	; 11
     1a4:	0a c0       	rjmp	.+20     	; 0x1ba <WS2812B_Send_Byte+0xe6>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1a6:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1a8:	00 00       	nop
    asm( "nop ");
     1aa:	00 00       	nop
    asm( "nop ");
     1ac:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1ae:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     1b0:	00 00       	nop
	asm( "nop ");
     1b2:	00 00       	nop
    asm( "nop ");
     1b4:	00 00       	nop
    asm( "nop ");
     1b6:	00 00       	nop
	asm( "nop ");
     1b8:	00 00       	nop
  }
  
  
  if(val & 0x04){
     1ba:	82 ff       	sbrs	r24, 2
     1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <WS2812B_Send_Byte+0x100>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1be:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1c0:	00 00       	nop
    asm( "nop ");
     1c2:	00 00       	nop
    asm( "nop ");
     1c4:	00 00       	nop
    asm( "nop ");
     1c6:	00 00       	nop
    asm( "nop ");
     1c8:	00 00       	nop
    asm( "nop ");
     1ca:	00 00       	nop
	asm( "nop ");
     1cc:	00 00       	nop
    asm( "nop ");
     1ce:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1d0:	5d 98       	cbi	0x0b, 5	; 11
     1d2:	0a c0       	rjmp	.+20     	; 0x1e8 <WS2812B_Send_Byte+0x114>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1d4:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1d6:	00 00       	nop
    asm( "nop ");
     1d8:	00 00       	nop
    asm( "nop ");
     1da:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1dc:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     1de:	00 00       	nop
	asm( "nop ");
     1e0:	00 00       	nop
    asm( "nop ");
     1e2:	00 00       	nop
    asm( "nop ");
     1e4:	00 00       	nop
	asm( "nop ");
     1e6:	00 00       	nop
  }
  
  
  if(val & 0x02){
     1e8:	81 ff       	sbrs	r24, 1
     1ea:	0b c0       	rjmp	.+22     	; 0x202 <WS2812B_Send_Byte+0x12e>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1ec:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1ee:	00 00       	nop
    asm( "nop ");
     1f0:	00 00       	nop
    asm( "nop ");
     1f2:	00 00       	nop
    asm( "nop ");
     1f4:	00 00       	nop
    asm( "nop ");
     1f6:	00 00       	nop
    asm( "nop ");
     1f8:	00 00       	nop
	asm( "nop ");
     1fa:	00 00       	nop
    asm( "nop ");
     1fc:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1fe:	5d 98       	cbi	0x0b, 5	; 11
     200:	0a c0       	rjmp	.+20     	; 0x216 <WS2812B_Send_Byte+0x142>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     202:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     204:	00 00       	nop
    asm( "nop ");
     206:	00 00       	nop
    asm( "nop ");
     208:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     20a:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     20c:	00 00       	nop
	asm( "nop ");
     20e:	00 00       	nop
    asm( "nop ");
     210:	00 00       	nop
    asm( "nop ");
     212:	00 00       	nop
	asm( "nop ");
     214:	00 00       	nop
  }
  
  
  if(val & 0x01){
     216:	80 ff       	sbrs	r24, 0
     218:	0b c0       	rjmp	.+22     	; 0x230 <WS2812B_Send_Byte+0x15c>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     21a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     21c:	00 00       	nop
    asm( "nop ");
     21e:	00 00       	nop
    asm( "nop ");
     220:	00 00       	nop
    asm( "nop ");
     222:	00 00       	nop
    asm( "nop ");
     224:	00 00       	nop
    asm( "nop ");
     226:	00 00       	nop
	asm( "nop ");
     228:	00 00       	nop
    asm( "nop ");
     22a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     22c:	5d 98       	cbi	0x0b, 5	; 11
     22e:	08 95       	ret
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     230:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     232:	00 00       	nop
    asm( "nop ");
     234:	00 00       	nop
    asm( "nop ");
     236:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     238:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     23a:	00 00       	nop
	asm( "nop ");
     23c:	00 00       	nop
    asm( "nop ");
     23e:	00 00       	nop
    asm( "nop ");
     240:	00 00       	nop
	asm( "nop ");
     242:	00 00       	nop
     244:	08 95       	ret

00000246 <WS2812B_Send_Pixel>:
  }
}

void WS2812B_Send_Pixel(uint8_t r, uint8_t g, uint8_t b){
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	18 2f       	mov	r17, r24
     24c:	86 2f       	mov	r24, r22
     24e:	04 2f       	mov	r16, r20
  WS2812B_Send_Byte(g);
     250:	0e 94 6a 00 	call	0xd4	; 0xd4 <WS2812B_Send_Byte>
  WS2812B_Send_Byte(r);
     254:	81 2f       	mov	r24, r17
     256:	0e 94 6a 00 	call	0xd4	; 0xd4 <WS2812B_Send_Byte>
  WS2812B_Send_Byte(b);
     25a:	80 2f       	mov	r24, r16
     25c:	0e 94 6a 00 	call	0xd4	; 0xd4 <WS2812B_Send_Byte>
}
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	08 95       	ret

00000266 <WS2812B_Pixel_Delay>:

void WS2812B_Pixel_Delay(void){
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
  for(uint32_t i=0;i<40000;i++){
	asm( "nop ");
     26a:	00 00       	nop
     26c:	01 96       	adiw	r24, 0x01	; 1
  WS2812B_Send_Byte(r);
  WS2812B_Send_Byte(b);
}

void WS2812B_Pixel_Delay(void){
  for(uint32_t i=0;i<40000;i++){
     26e:	2c e9       	ldi	r18, 0x9C	; 156
     270:	80 34       	cpi	r24, 0x40	; 64
     272:	92 07       	cpc	r25, r18
     274:	d1 f7       	brne	.-12     	; 0x26a <WS2812B_Pixel_Delay+0x4>
	asm( "nop ");
  }
}
     276:	08 95       	ret

00000278 <WS2812B_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
     278:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
     27a:	5d 98       	cbi	0x0b, 5	; 11
}

  
void WS2812B_Init(void){
  WS2812B_Gpio_Init();
}
     27c:	08 95       	ret

0000027e <RGB_Animation_Clear_Pixel_Buf>:
  uint8_t PixelBuf[WS2812B_ANIMATION_PIXELS];
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
     27e:	e5 e4       	ldi	r30, 0x45	; 69
     280:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
     282:	11 92       	st	Z+, r1
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	e5 38       	cpi	r30, 0x85	; 133
     288:	f8 07       	cpc	r31, r24
     28a:	d9 f7       	brne	.-10     	; 0x282 <RGB_Animation_Clear_Pixel_Buf+0x4>
	RGBAnim.PixelBuf[i]=0;
  }
}
     28c:	08 95       	ret

0000028e <RGB_Animation_Brightness_Dec>:
    WS2812B_Send_Pixel(r,g,b);
	_delay_ms(10);
  }
}

void RGB_Animation_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b){
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	d8 2e       	mov	r13, r24
     29e:	e6 2e       	mov	r14, r22
     2a0:	f4 2e       	mov	r15, r20
     2a2:	c0 e0       	ldi	r28, 0x00	; 0
     2a4:	d0 e0       	ldi	r29, 0x00	; 0
     2a6:	00 e3       	ldi	r16, 0x30	; 48
     2a8:	15 e7       	ldi	r17, 0x75	; 117
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    WS2812B_Send_Pixel(r,g,b);
     2aa:	8d 2d       	mov	r24, r13
     2ac:	6e 2d       	mov	r22, r14
     2ae:	4f 2d       	mov	r20, r15
     2b0:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     2b4:	c8 01       	movw	r24, r16
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <RGB_Animation_Brightness_Dec+0x28>
	_delay_ms(10);
  }
}

void RGB_Animation_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b){
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     2ba:	21 96       	adiw	r28, 0x01	; 1
     2bc:	c0 34       	cpi	r28, 0x40	; 64
     2be:	d1 05       	cpc	r29, r1
     2c0:	a1 f7       	brne	.-24     	; 0x2aa <RGB_Animation_Brightness_Dec+0x1c>
    WS2812B_Send_Pixel(r,g,b);
	_delay_ms(10);
  }
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	08 95       	ret

000002d2 <RGB_Animation_Brightness_Inc>:
	RGBAnim.PixelBuf[i]=0;
  }
}


void RGB_Animation_Brightness_Inc(uint8_t r, uint8_t g, uint8_t b){
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	f8 2e       	mov	r15, r24
     2e2:	06 2f       	mov	r16, r22
     2e4:	14 2f       	mov	r17, r20
  RGBAnim.MaxVal=r;
     2e6:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     2ea:	86 17       	cp	r24, r22
     2ec:	10 f4       	brcc	.+4      	; 0x2f2 <RGB_Animation_Brightness_Inc+0x20>
    RGBAnim.MaxVal=g;
     2ee:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     2f2:	80 91 44 01 	lds	r24, 0x0144
     2f6:	81 17       	cp	r24, r17
     2f8:	10 f4       	brcc	.+4      	; 0x2fe <RGB_Animation_Brightness_Inc+0x2c>
    RGBAnim.MaxVal=b;
     2fa:	10 93 44 01 	sts	0x0144, r17
     2fe:	c0 e0       	ldi	r28, 0x00	; 0
     300:	d0 e0       	ldi	r29, 0x00	; 0
     302:	80 e3       	ldi	r24, 0x30	; 48
     304:	c8 2e       	mov	r12, r24
     306:	85 e7       	ldi	r24, 0x75	; 117
     308:	d8 2e       	mov	r13, r24
  }
  
  
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    WS2812B_Send_Pixel(r,g,b);
     30a:	8f 2d       	mov	r24, r15
     30c:	60 2f       	mov	r22, r16
     30e:	41 2f       	mov	r20, r17
     310:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     314:	c6 01       	movw	r24, r12
     316:	01 97       	sbiw	r24, 0x01	; 1
     318:	f1 f7       	brne	.-4      	; 0x316 <RGB_Animation_Brightness_Inc+0x44>
  if(b>RGBAnim.MaxVal){
    RGBAnim.MaxVal=b;
  }
  
  
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     31a:	21 96       	adiw	r28, 0x01	; 1
     31c:	c0 34       	cpi	r28, 0x40	; 64
     31e:	d1 05       	cpc	r29, r1
     320:	a1 f7       	brne	.-24     	; 0x30a <RGB_Animation_Brightness_Inc+0x38>
    WS2812B_Send_Pixel(r,g,b);
	_delay_ms(10);
  }
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	1f 91       	pop	r17
     328:	0f 91       	pop	r16
     32a:	ff 90       	pop	r15
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	08 95       	ret

00000332 <RGB_Animation_Slide>:
}


uint16_t  color=0,color1=0,color2=0,color3=0;

void RGB_Animation_Slide(void){
     332:	8f 92       	push	r8
     334:	9f 92       	push	r9
     336:	af 92       	push	r10
     338:	bf 92       	push	r11
     33a:	cf 92       	push	r12
     33c:	df 92       	push	r13
     33e:	ef 92       	push	r14
     340:	ff 92       	push	r15
     342:	0f 93       	push	r16
     344:	1f 93       	push	r17
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
  uint16_t leading_blank=0;
  uint16_t trailing_blank=0;
  
  if(color==0){
     34a:	80 91 3c 01 	lds	r24, 0x013C
     34e:	90 91 3d 01 	lds	r25, 0x013D
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	d1 f4       	brne	.+52     	; 0x38a <RGB_Animation_Slide+0x58>
	  color1=0xFF;
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	90 93 3f 01 	sts	0x013F, r25
     35e:	80 93 3e 01 	sts	0x013E, r24
	  color2=0x00;
     362:	10 92 41 01 	sts	0x0141, r1
     366:	10 92 40 01 	sts	0x0140, r1
	  color3=0x00;
     36a:	10 92 43 01 	sts	0x0143, r1
     36e:	10 92 42 01 	sts	0x0142, r1
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	ee 24       	eor	r14, r14
     378:	ff 24       	eor	r15, r15
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
     37a:	20 e4       	ldi	r18, 0x40	; 64
     37c:	82 2e       	mov	r8, r18
     37e:	91 2c       	mov	r9, r1
     380:	98 eb       	ldi	r25, 0xB8	; 184
     382:	a9 2e       	mov	r10, r25
     384:	9b e0       	ldi	r25, 0x0B	; 11
     386:	b9 2e       	mov	r11, r25
     388:	37 c0       	rjmp	.+110    	; 0x3f8 <RGB_Animation_Slide+0xc6>
  if(color==0){
	  color1=0xFF;
	  color2=0x00;
	  color3=0x00;
	}
	else if(color==1){
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	91 05       	cpc	r25, r1
     38e:	39 f4       	brne	.+14     	; 0x39e <RGB_Animation_Slide+0x6c>
	  color1=0xFF;
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	90 93 3f 01 	sts	0x013F, r25
     398:	80 93 3e 01 	sts	0x013E, r24
     39c:	09 c0       	rjmp	.+18     	; 0x3b0 <RGB_Animation_Slide+0x7e>
	  color2=0xFF;
	  color3=0x00;
	}
	else if(color==2){
     39e:	82 30       	cpi	r24, 0x02	; 2
     3a0:	91 05       	cpc	r25, r1
     3a2:	59 f4       	brne	.+22     	; 0x3ba <RGB_Animation_Slide+0x88>
	  color1=0x00;
     3a4:	10 92 3f 01 	sts	0x013F, r1
     3a8:	10 92 3e 01 	sts	0x013E, r1
	  color2=0xFF;
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	90 93 41 01 	sts	0x0141, r25
     3b4:	80 93 40 01 	sts	0x0140, r24
     3b8:	d8 cf       	rjmp	.-80     	; 0x36a <RGB_Animation_Slide+0x38>
	  color3=0x00;
	}
	else if(color==3){
     3ba:	83 30       	cpi	r24, 0x03	; 3
     3bc:	91 05       	cpc	r25, r1
     3be:	59 f4       	brne	.+22     	; 0x3d6 <RGB_Animation_Slide+0xa4>
	  color1=0x00;
     3c0:	10 92 3f 01 	sts	0x013F, r1
     3c4:	10 92 3e 01 	sts	0x013E, r1
	  color2=0xFF;
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	90 93 41 01 	sts	0x0141, r25
     3d0:	80 93 40 01 	sts	0x0140, r24
     3d4:	0c c0       	rjmp	.+24     	; 0x3ee <RGB_Animation_Slide+0xbc>
	  color3=0xFF;
	}
	else if(color==4){
     3d6:	04 97       	sbiw	r24, 0x04	; 4
     3d8:	61 f6       	brne	.-104    	; 0x372 <RGB_Animation_Slide+0x40>
	  color1=0x00;
     3da:	10 92 3f 01 	sts	0x013F, r1
     3de:	10 92 3e 01 	sts	0x013E, r1
	  color2=0x00;
     3e2:	10 92 41 01 	sts	0x0141, r1
     3e6:	10 92 40 01 	sts	0x0140, r1
	  color3=0xFF;
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	90 93 43 01 	sts	0x0143, r25
     3f2:	80 93 42 01 	sts	0x0142, r24
     3f6:	bd cf       	rjmp	.-134    	; 0x372 <RGB_Animation_Slide+0x40>
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
     3f8:	64 01       	movw	r12, r8
     3fa:	c0 1a       	sub	r12, r16
     3fc:	d1 0a       	sbc	r13, r17
     3fe:	c0 e0       	ldi	r28, 0x00	; 0
     400:	d0 e0       	ldi	r29, 0x00	; 0
     402:	06 c0       	rjmp	.+12     	; 0x410 <RGB_Animation_Slide+0xde>
	
	
	
    for(uint16_t i=0;i<leading_blank;i++){
      WS2812B_Send_Pixel(0x00,0x00,0x00);
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
	
	
	
    for(uint16_t i=0;i<leading_blank;i++){
     40e:	21 96       	adiw	r28, 0x01	; 1
     410:	c0 17       	cp	r28, r16
     412:	d1 07       	cpc	r29, r17
     414:	b8 f3       	brcs	.-18     	; 0x404 <RGB_Animation_Slide+0xd2>
      WS2812B_Send_Pixel(0x00,0x00,0x00);
    }
	
	for(uint16_t i=0;i<3;i++){
	  WS2812B_Send_Pixel(color1,color2,color3);
     416:	80 91 3e 01 	lds	r24, 0x013E
     41a:	60 91 40 01 	lds	r22, 0x0140
     41e:	40 91 42 01 	lds	r20, 0x0142
     422:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     426:	80 91 3e 01 	lds	r24, 0x013E
     42a:	60 91 40 01 	lds	r22, 0x0140
     42e:	40 91 42 01 	lds	r20, 0x0142
     432:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     436:	80 91 3e 01 	lds	r24, 0x013E
     43a:	60 91 40 01 	lds	r22, 0x0140
     43e:	40 91 42 01 	lds	r20, 0x0142
     442:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     446:	c0 e0       	ldi	r28, 0x00	; 0
     448:	d0 e0       	ldi	r29, 0x00	; 0
     44a:	06 c0       	rjmp	.+12     	; 0x458 <RGB_Animation_Slide+0x126>
	}
	
    for(uint16_t i=0;i<trailing_blank;i++){
      WS2812B_Send_Pixel(0x00,0x00,0x00);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
	
	for(uint16_t i=0;i<3;i++){
	  WS2812B_Send_Pixel(color1,color2,color3);
	}
	
    for(uint16_t i=0;i<trailing_blank;i++){
     456:	21 96       	adiw	r28, 0x01	; 1
     458:	cc 15       	cp	r28, r12
     45a:	dd 05       	cpc	r29, r13
     45c:	b8 f3       	brcs	.-18     	; 0x44c <RGB_Animation_Slide+0x11a>
      WS2812B_Send_Pixel(0x00,0x00,0x00);
    }
	
	leading_blank++;
     45e:	0f 5f       	subi	r16, 0xFF	; 255
     460:	1f 4f       	sbci	r17, 0xFF	; 255
	if(leading_blank>=WS2812B_ANIMATION_PIXELS){
     462:	00 34       	cpi	r16, 0x40	; 64
     464:	11 05       	cpc	r17, r1
     466:	10 f0       	brcs	.+4      	; 0x46c <RGB_Animation_Slide+0x13a>
     468:	00 e0       	ldi	r16, 0x00	; 0
     46a:	10 e0       	ldi	r17, 0x00	; 0
     46c:	c5 01       	movw	r24, r10
     46e:	01 97       	sbiw	r24, 0x01	; 1
     470:	f1 f7       	brne	.-4      	; 0x46e <RGB_Animation_Slide+0x13c>
	  color1=0xFF;
	  color2=0x00;
	  color3=0xFF;
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     472:	08 94       	sec
     474:	e1 1c       	adc	r14, r1
     476:	f1 1c       	adc	r15, r1
     478:	80 e4       	ldi	r24, 0x40	; 64
     47a:	e8 16       	cp	r14, r24
     47c:	f1 04       	cpc	r15, r1
     47e:	09 f0       	breq	.+2      	; 0x482 <RGB_Animation_Slide+0x150>
     480:	bb cf       	rjmp	.-138    	; 0x3f8 <RGB_Animation_Slide+0xc6>
	
	
	_delay_ms(1);
  }
  
  color++;
     482:	80 91 3c 01 	lds	r24, 0x013C
     486:	90 91 3d 01 	lds	r25, 0x013D
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	90 93 3d 01 	sts	0x013D, r25
     490:	80 93 3c 01 	sts	0x013C, r24
	if(color>4){
     494:	05 97       	sbiw	r24, 0x05	; 5
     496:	20 f0       	brcs	.+8      	; 0x4a0 <RGB_Animation_Slide+0x16e>
	  color=0;
     498:	10 92 3d 01 	sts	0x013D, r1
     49c:	10 92 3c 01 	sts	0x013C, r1
	}
}
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	ff 90       	pop	r15
     4aa:	ef 90       	pop	r14
     4ac:	df 90       	pop	r13
     4ae:	cf 90       	pop	r12
     4b0:	bf 90       	pop	r11
     4b2:	af 90       	pop	r10
     4b4:	9f 90       	pop	r9
     4b6:	8f 90       	pop	r8
     4b8:	08 95       	ret

000004ba <RGB_Animation_Rotate_All_Color>:
}




void RGB_Animation_Rotate_All_Color(void){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	c0 e0       	ldi	r28, 0x00	; 0
     4c0:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t j=0;j<WS2812B_ANIMATION_PIXELS;j++){
	WS2812B_Send_Pixel(red,green,blue);
     4c2:	80 91 36 01 	lds	r24, 0x0136
     4c6:	60 91 37 01 	lds	r22, 0x0137
     4ca:	40 91 38 01 	lds	r20, 0x0138
     4ce:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>




void RGB_Animation_Rotate_All_Color(void){
  for(uint16_t j=0;j<WS2812B_ANIMATION_PIXELS;j++){
     4d2:	21 96       	adiw	r28, 0x01	; 1
     4d4:	c0 34       	cpi	r28, 0x40	; 64
     4d6:	d1 05       	cpc	r29, r1
     4d8:	a1 f7       	brne	.-24     	; 0x4c2 <RGB_Animation_Rotate_All_Color+0x8>
	WS2812B_Send_Pixel(red,green,blue);
  }

  if(red_dir==UPCOUNT){
     4da:	80 91 39 01 	lds	r24, 0x0139
     4de:	88 23       	and	r24, r24
     4e0:	31 f4       	brne	.+12     	; 0x4ee <RGB_Animation_Rotate_All_Color+0x34>
	if(red<RED_MAX){
     4e2:	80 91 36 01 	lds	r24, 0x0136
     4e6:	8f 3f       	cpi	r24, 0xFF	; 255
     4e8:	59 f0       	breq	.+22     	; 0x500 <RGB_Animation_Rotate_All_Color+0x46>
	  red++;
     4ea:	8f 5f       	subi	r24, 0xFF	; 255
     4ec:	07 c0       	rjmp	.+14     	; 0x4fc <RGB_Animation_Rotate_All_Color+0x42>
	}
  }else if(red_dir==DOWNCOUNT){
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	39 f4       	brne	.+14     	; 0x500 <RGB_Animation_Rotate_All_Color+0x46>
	if(red>0){
     4f2:	80 91 36 01 	lds	r24, 0x0136
     4f6:	88 23       	and	r24, r24
     4f8:	19 f0       	breq	.+6      	; 0x500 <RGB_Animation_Rotate_All_Color+0x46>
	  red--;
     4fa:	81 50       	subi	r24, 0x01	; 1
     4fc:	80 93 36 01 	sts	0x0136, r24
	}
  }
	
  if(green_dir==UPCOUNT){
     500:	80 91 3a 01 	lds	r24, 0x013A
     504:	88 23       	and	r24, r24
     506:	31 f4       	brne	.+12     	; 0x514 <RGB_Animation_Rotate_All_Color+0x5a>
	if(green<GREEN_MAX){
     508:	80 91 37 01 	lds	r24, 0x0137
     50c:	8f 3f       	cpi	r24, 0xFF	; 255
     50e:	59 f0       	breq	.+22     	; 0x526 <RGB_Animation_Rotate_All_Color+0x6c>
	  green++;
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	07 c0       	rjmp	.+14     	; 0x522 <RGB_Animation_Rotate_All_Color+0x68>
	}
  }else if(green_dir==DOWNCOUNT){
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	39 f4       	brne	.+14     	; 0x526 <RGB_Animation_Rotate_All_Color+0x6c>
	if(green>0){
     518:	80 91 37 01 	lds	r24, 0x0137
     51c:	88 23       	and	r24, r24
     51e:	19 f0       	breq	.+6      	; 0x526 <RGB_Animation_Rotate_All_Color+0x6c>
	  green--;
     520:	81 50       	subi	r24, 0x01	; 1
     522:	80 93 37 01 	sts	0x0137, r24
	}
  }

  if(blue_dir==UPCOUNT){
     526:	80 91 3b 01 	lds	r24, 0x013B
     52a:	88 23       	and	r24, r24
     52c:	31 f4       	brne	.+12     	; 0x53a <RGB_Animation_Rotate_All_Color+0x80>
	if(blue<BLUE_MAX){
     52e:	80 91 38 01 	lds	r24, 0x0138
     532:	8f 3f       	cpi	r24, 0xFF	; 255
     534:	59 f0       	breq	.+22     	; 0x54c <RGB_Animation_Rotate_All_Color+0x92>
	  blue++;
     536:	8f 5f       	subi	r24, 0xFF	; 255
     538:	07 c0       	rjmp	.+14     	; 0x548 <RGB_Animation_Rotate_All_Color+0x8e>
	}
  }else if(blue_dir==DOWNCOUNT){
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	39 f4       	brne	.+14     	; 0x54c <RGB_Animation_Rotate_All_Color+0x92>
	if(blue>0){
     53e:	80 91 38 01 	lds	r24, 0x0138
     542:	88 23       	and	r24, r24
     544:	19 f0       	breq	.+6      	; 0x54c <RGB_Animation_Rotate_All_Color+0x92>
	  blue--;
     546:	81 50       	subi	r24, 0x01	; 1
     548:	80 93 38 01 	sts	0x0138, r24
	}
  }

  if     ((red == RED_MAX) && (green == 0  ) && (blue == 0)){
     54c:	80 91 36 01 	lds	r24, 0x0136
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	d9 f4       	brne	.+54     	; 0x58a <RGB_Animation_Rotate_All_Color+0xd0>
     554:	80 91 37 01 	lds	r24, 0x0137
     558:	88 23       	and	r24, r24
     55a:	51 f4       	brne	.+20     	; 0x570 <RGB_Animation_Rotate_All_Color+0xb6>
     55c:	80 91 38 01 	lds	r24, 0x0138
     560:	88 23       	and	r24, r24
     562:	81 f5       	brne	.+96     	; 0x5c4 <RGB_Animation_Rotate_All_Color+0x10a>
	red_dir   = HALT;
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	80 93 39 01 	sts	0x0139, r24
	green_dir = UPCOUNT;
     56a:	10 92 3a 01 	sts	0x013A, r1
     56e:	38 c0       	rjmp	.+112    	; 0x5e0 <RGB_Animation_Rotate_All_Color+0x126>
	blue_dir  = HALT;
  }
  else if((red == RED_MAX) && (green == GREEN_MAX) && (blue == 0)){
     570:	8f 3f       	cpi	r24, 0xFF	; 255
     572:	41 f5       	brne	.+80     	; 0x5c4 <RGB_Animation_Rotate_All_Color+0x10a>
     574:	80 91 38 01 	lds	r24, 0x0138
     578:	88 23       	and	r24, r24
     57a:	21 f5       	brne	.+72     	; 0x5c4 <RGB_Animation_Rotate_All_Color+0x10a>
	red_dir   = DOWNCOUNT;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 39 01 	sts	0x0139, r24
	green_dir = HALT;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	80 93 3a 01 	sts	0x013A, r24
     588:	2b c0       	rjmp	.+86     	; 0x5e0 <RGB_Animation_Rotate_All_Color+0x126>
	blue_dir  = HALT;
  }	
  else if((red == 0  ) && (green == GREEN_MAX) && (blue == 0)){
     58a:	88 23       	and	r24, r24
     58c:	c9 f4       	brne	.+50     	; 0x5c0 <RGB_Animation_Rotate_All_Color+0x106>
     58e:	80 91 37 01 	lds	r24, 0x0137
     592:	8f 3f       	cpi	r24, 0xFF	; 255
     594:	39 f5       	brne	.+78     	; 0x5e4 <RGB_Animation_Rotate_All_Color+0x12a>
     596:	80 91 38 01 	lds	r24, 0x0138
     59a:	88 23       	and	r24, r24
     59c:	41 f4       	brne	.+16     	; 0x5ae <RGB_Animation_Rotate_All_Color+0xf4>
	red_dir   = HALT;
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	80 93 39 01 	sts	0x0139, r24
	green_dir = HALT;
     5a4:	80 93 3a 01 	sts	0x013A, r24
	blue_dir  = UPCOUNT;
     5a8:	10 92 3b 01 	sts	0x013B, r1
     5ac:	1b c0       	rjmp	.+54     	; 0x5e4 <RGB_Animation_Rotate_All_Color+0x12a>
  }

  else if((red == 0  ) && (green == GREEN_MAX) && (blue == BLUE_MAX)){
     5ae:	8f 3f       	cpi	r24, 0xFF	; 255
     5b0:	c9 f4       	brne	.+50     	; 0x5e4 <RGB_Animation_Rotate_All_Color+0x12a>
	red_dir   = UPCOUNT;
     5b2:	10 92 39 01 	sts	0x0139, r1
	green_dir = DOWNCOUNT;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 3a 01 	sts	0x013A, r24
	blue_dir  = HALT;
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	10 c0       	rjmp	.+32     	; 0x5e0 <RGB_Animation_Rotate_All_Color+0x126>
	red_dir   = UPCOUNT;
	green_dir = HALT;
	blue_dir  = HALT;
  }*/
  
  else if((red == RED_MAX) && (green == 0) && (blue == BLUE_MAX)){
     5c0:	8f 3f       	cpi	r24, 0xFF	; 255
     5c2:	81 f4       	brne	.+32     	; 0x5e4 <RGB_Animation_Rotate_All_Color+0x12a>
     5c4:	80 91 37 01 	lds	r24, 0x0137
     5c8:	88 23       	and	r24, r24
     5ca:	61 f4       	brne	.+24     	; 0x5e4 <RGB_Animation_Rotate_All_Color+0x12a>
     5cc:	80 91 38 01 	lds	r24, 0x0138
     5d0:	8f 3f       	cpi	r24, 0xFF	; 255
     5d2:	41 f4       	brne	.+16     	; 0x5e4 <RGB_Animation_Rotate_All_Color+0x12a>
	red_dir   = HALT;
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	80 93 39 01 	sts	0x0139, r24
	green_dir = HALT;
     5da:	80 93 3a 01 	sts	0x013A, r24
	blue_dir  = DOWNCOUNT;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 3b 01 	sts	0x013B, r24
  }
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <RGB_Brightness_Dec_Mid>:
	
	_delay_us(100);
  }
}

void RGB_Brightness_Dec_Mid(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     5ea:	2f 92       	push	r2
     5ec:	3f 92       	push	r3
     5ee:	4f 92       	push	r4
     5f0:	5f 92       	push	r5
     5f2:	6f 92       	push	r6
     5f4:	7f 92       	push	r7
     5f6:	8f 92       	push	r8
     5f8:	9f 92       	push	r9
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	d8 2e       	mov	r13, r24
     610:	e6 2e       	mov	r14, r22
     612:	f4 2e       	mov	r15, r20
     614:	29 01       	movw	r4, r18
  RGBAnim.MaxVal=r;
     616:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     61a:	86 17       	cp	r24, r22
     61c:	10 f4       	brcc	.+4      	; 0x622 <RGB_Brightness_Dec_Mid+0x38>
    RGBAnim.MaxVal=g;
     61e:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     622:	80 91 44 01 	lds	r24, 0x0144
     626:	8f 15       	cp	r24, r15
     628:	10 f4       	brcc	.+4      	; 0x62e <RGB_Brightness_Dec_Mid+0x44>
    RGBAnim.MaxVal=b;
     62a:	f0 92 44 01 	sts	0x0144, r15
     62e:	00 e0       	ldi	r16, 0x00	; 0
     630:	10 e0       	ldi	r17, 0x00	; 0
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     632:	44 e4       	ldi	r20, 0x44	; 68
     634:	24 2e       	mov	r2, r20
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	34 2e       	mov	r3, r20
     63a:	24 0c       	add	r2, r4
     63c:	35 1c       	adc	r3, r5
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     63e:	6d 2c       	mov	r6, r13
     640:	77 24       	eor	r7, r7
     642:	8e 2c       	mov	r8, r14
     644:	99 24       	eor	r9, r9
     646:	af 2c       	mov	r10, r15
     648:	bb 24       	eor	r11, r11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     64a:	30 e6       	ldi	r19, 0x60	; 96
     64c:	c3 2e       	mov	r12, r19
     64e:	31 c0       	rjmp	.+98     	; 0x6b2 <RGB_Brightness_Dec_Mid+0xc8>
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	88 23       	and	r24, r24
     654:	21 f0       	breq	.+8      	; 0x65e <RGB_Brightness_Dec_Mid+0x74>
	    WS2812B_Send_Pixel(r,g,b);
     656:	8d 2d       	mov	r24, r13
     658:	6e 2d       	mov	r22, r14
     65a:	4f 2d       	mov	r20, r15
     65c:	03 c0       	rjmp	.+6      	; 0x664 <RGB_Brightness_Dec_Mid+0x7a>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     668:	21 96       	adiw	r28, 0x01	; 1
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     66a:	c2 15       	cp	r28, r2
     66c:	d3 05       	cpc	r29, r3
     66e:	81 f7       	brne	.-32     	; 0x650 <RGB_Brightness_Dec_Mid+0x66>
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     670:	20 2f       	mov	r18, r16
     672:	60 16       	cp	r6, r16
     674:	71 06       	cpc	r7, r17
     676:	08 f4       	brcc	.+2      	; 0x67a <RGB_Brightness_Dec_Mid+0x90>
     678:	26 2d       	mov	r18, r6
     67a:	60 2f       	mov	r22, r16
     67c:	80 16       	cp	r8, r16
     67e:	91 06       	cpc	r9, r17
     680:	08 f4       	brcc	.+2      	; 0x684 <RGB_Brightness_Dec_Mid+0x9a>
     682:	68 2d       	mov	r22, r8
     684:	40 2f       	mov	r20, r16
     686:	a0 16       	cp	r10, r16
     688:	b1 06       	cpc	r11, r17
     68a:	08 f4       	brcc	.+2      	; 0x68e <RGB_Brightness_Dec_Mid+0xa4>
     68c:	4a 2d       	mov	r20, r10
     68e:	82 2f       	mov	r24, r18
     690:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     694:	c2 01       	movw	r24, r4
     696:	04 c0       	rjmp	.+8      	; 0x6a0 <RGB_Brightness_Dec_Mid+0xb6>
     698:	2c 2d       	mov	r18, r12
     69a:	2a 95       	dec	r18
     69c:	f1 f7       	brne	.-4      	; 0x69a <RGB_Brightness_Dec_Mid+0xb0>
	
	for(uint16_t j=idle_pix;j<WS2812B_ANIMATION_PIXELS;j++){
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	80 34       	cpi	r24, 0x40	; 64
     6a2:	91 05       	cpc	r25, r1
     6a4:	c8 f3       	brcs	.-14     	; 0x698 <RGB_Brightness_Dec_Mid+0xae>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6a6:	8c e2       	ldi	r24, 0x2C	; 44
     6a8:	91 e0       	ldi	r25, 0x01	; 1
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <RGB_Brightness_Dec_Mid+0xc0>
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
     6ae:	0f 5f       	subi	r16, 0xFF	; 255
     6b0:	1f 4f       	sbci	r17, 0xFF	; 255
     6b2:	80 91 44 01 	lds	r24, 0x0144
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	08 17       	cp	r16, r24
     6ba:	19 07       	cpc	r17, r25
     6bc:	18 f4       	brcc	.+6      	; 0x6c4 <RGB_Brightness_Dec_Mid+0xda>
     6be:	c4 e4       	ldi	r28, 0x44	; 68
     6c0:	d1 e0       	ldi	r29, 0x01	; 1
     6c2:	d3 cf       	rjmp	.-90     	; 0x66a <RGB_Brightness_Dec_Mid+0x80>
	for(uint16_t j=idle_pix;j<WS2812B_ANIMATION_PIXELS;j++){
      _delay_us(24);
    }
	_delay_us(100);
  }
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	ff 90       	pop	r15
     6ce:	ef 90       	pop	r14
     6d0:	df 90       	pop	r13
     6d2:	cf 90       	pop	r12
     6d4:	bf 90       	pop	r11
     6d6:	af 90       	pop	r10
     6d8:	9f 90       	pop	r9
     6da:	8f 90       	pop	r8
     6dc:	7f 90       	pop	r7
     6de:	6f 90       	pop	r6
     6e0:	5f 90       	pop	r5
     6e2:	4f 90       	pop	r4
     6e4:	3f 90       	pop	r3
     6e6:	2f 90       	pop	r2
     6e8:	08 95       	ret

000006ea <RGB_Brightness_Inc_Mid>:
  }
}



void RGB_Brightness_Inc_Mid(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     6ea:	2f 92       	push	r2
     6ec:	3f 92       	push	r3
     6ee:	4f 92       	push	r4
     6f0:	5f 92       	push	r5
     6f2:	6f 92       	push	r6
     6f4:	7f 92       	push	r7
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	df 93       	push	r29
     70c:	cf 93       	push	r28
     70e:	00 d0       	rcall	.+0      	; 0x710 <RGB_Brightness_Inc_Mid+0x26>
     710:	00 d0       	rcall	.+0      	; 0x712 <RGB_Brightness_Inc_Mid+0x28>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	98 2e       	mov	r9, r24
     718:	a6 2e       	mov	r10, r22
     71a:	b4 2e       	mov	r11, r20
     71c:	79 01       	movw	r14, r18
  RGBAnim.MaxVal=r;
     71e:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     722:	86 17       	cp	r24, r22
     724:	10 f4       	brcc	.+4      	; 0x72a <RGB_Brightness_Inc_Mid+0x40>
    RGBAnim.MaxVal=g;
     726:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     72a:	80 91 44 01 	lds	r24, 0x0144
     72e:	8b 15       	cp	r24, r11
     730:	10 f4       	brcc	.+4      	; 0x736 <RGB_Brightness_Inc_Mid+0x4c>
    RGBAnim.MaxVal=b;
     732:	b0 92 44 01 	sts	0x0144, r11
     736:	00 e0       	ldi	r16, 0x00	; 0
     738:	10 e0       	ldi	r17, 0x00	; 0
	  temp[2]=b;
	}else{
	  temp[2]=i;
	}
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]); //lit-up-gradually
     73a:	89 2d       	mov	r24, r9
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	9a 83       	std	Y+2, r25	; 0x02
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	2a 2c       	mov	r2, r10
     744:	33 24       	eor	r3, r3
     746:	4b 2c       	mov	r4, r11
     748:	55 24       	eor	r5, r5
	
	for(uint16_t j=pixel+1;j<WS2812B_ANIMATION_PIXELS-pixel-1;j++){
     74a:	5f e3       	ldi	r21, 0x3F	; 63
     74c:	c5 2e       	mov	r12, r21
     74e:	d1 2c       	mov	r13, r1
     750:	ce 18       	sub	r12, r14
     752:	df 08       	sbc	r13, r15
     754:	4c c0       	rjmp	.+152    	; 0x7ee <RGB_Brightness_Inc_Mid+0x104>

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    
	
	for(uint16_t j=0;j<pixel;j++){
	  WS2812B_Send_Pixel(r,g,b);
     756:	89 2d       	mov	r24, r9
     758:	6a 2d       	mov	r22, r10
     75a:	4b 2d       	mov	r20, r11
     75c:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    
	
	for(uint16_t j=0;j<pixel;j++){
     760:	08 94       	sec
     762:	61 1c       	adc	r6, r1
     764:	71 1c       	adc	r7, r1
     766:	6e 14       	cp	r6, r14
     768:	7f 04       	cpc	r7, r15
     76a:	a8 f3       	brcs	.-22     	; 0x756 <RGB_Brightness_Inc_Mid+0x6c>
	  temp[2]=b;
	}else{
	  temp[2]=i;
	}
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]); //lit-up-gradually
     76c:	20 2f       	mov	r18, r16
     76e:	e9 81       	ldd	r30, Y+1	; 0x01
     770:	fa 81       	ldd	r31, Y+2	; 0x02
     772:	e0 17       	cp	r30, r16
     774:	f1 07       	cpc	r31, r17
     776:	08 f4       	brcc	.+2      	; 0x77a <RGB_Brightness_Inc_Mid+0x90>
     778:	2e 2f       	mov	r18, r30
     77a:	62 2e       	mov	r6, r18
     77c:	60 2f       	mov	r22, r16
     77e:	20 16       	cp	r2, r16
     780:	31 06       	cpc	r3, r17
     782:	08 f4       	brcc	.+2      	; 0x786 <RGB_Brightness_Inc_Mid+0x9c>
     784:	62 2d       	mov	r22, r2
     786:	86 2e       	mov	r8, r22
     788:	40 2f       	mov	r20, r16
     78a:	40 16       	cp	r4, r16
     78c:	51 06       	cpc	r5, r17
     78e:	08 f4       	brcc	.+2      	; 0x792 <RGB_Brightness_Inc_Mid+0xa8>
     790:	44 2d       	mov	r20, r4
     792:	74 2e       	mov	r7, r20
     794:	86 2d       	mov	r24, r6
     796:	68 2d       	mov	r22, r8
     798:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     79c:	fc 82       	std	Y+4, r15	; 0x04
     79e:	eb 82       	std	Y+3, r14	; 0x03
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <RGB_Brightness_Inc_Mid+0xc2>
	
	for(uint16_t j=pixel+1;j<WS2812B_ANIMATION_PIXELS-pixel-1;j++){
	    WS2812B_Send_Pixel(0,0,0);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	9c 81       	ldd	r25, Y+4	; 0x04
     7b0:	01 96       	adiw	r24, 0x01	; 1
     7b2:	9c 83       	std	Y+4, r25	; 0x04
     7b4:	8b 83       	std	Y+3, r24	; 0x03
	  temp[2]=i;
	}
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]); //lit-up-gradually
	
	for(uint16_t j=pixel+1;j<WS2812B_ANIMATION_PIXELS-pixel-1;j++){
     7b6:	8c 15       	cp	r24, r12
     7b8:	9d 05       	cpc	r25, r13
     7ba:	98 f3       	brcs	.-26     	; 0x7a2 <RGB_Brightness_Inc_Mid+0xb8>
	    WS2812B_Send_Pixel(0,0,0);
    }
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     7bc:	86 2d       	mov	r24, r6
     7be:	68 2d       	mov	r22, r8
     7c0:	47 2d       	mov	r20, r7
     7c2:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     7c6:	66 24       	eor	r6, r6
     7c8:	77 24       	eor	r7, r7
     7ca:	08 c0       	rjmp	.+16     	; 0x7dc <RGB_Brightness_Inc_Mid+0xf2>
	
	for(uint16_t j=0;j<pixel;j++){
	  WS2812B_Send_Pixel(r,g,b);
     7cc:	89 2d       	mov	r24, r9
     7ce:	6a 2d       	mov	r22, r10
     7d0:	4b 2d       	mov	r20, r11
     7d2:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
	    WS2812B_Send_Pixel(0,0,0);
    }
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	
	for(uint16_t j=0;j<pixel;j++){
     7d6:	08 94       	sec
     7d8:	61 1c       	adc	r6, r1
     7da:	71 1c       	adc	r7, r1
     7dc:	6e 14       	cp	r6, r14
     7de:	7f 04       	cpc	r7, r15
     7e0:	a8 f3       	brcs	.-22     	; 0x7cc <RGB_Brightness_Inc_Mid+0xe2>
     7e2:	8c e2       	ldi	r24, 0x2C	; 44
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <RGB_Brightness_Inc_Mid+0xfc>
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
     7ea:	0f 5f       	subi	r16, 0xFF	; 255
     7ec:	1f 4f       	sbci	r17, 0xFF	; 255
     7ee:	80 91 44 01 	lds	r24, 0x0144
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	08 17       	cp	r16, r24
     7f6:	19 07       	cpc	r17, r25
     7f8:	18 f4       	brcc	.+6      	; 0x800 <RGB_Brightness_Inc_Mid+0x116>
     7fa:	66 24       	eor	r6, r6
     7fc:	77 24       	eor	r7, r7
     7fe:	b3 cf       	rjmp	.-154    	; 0x766 <RGB_Brightness_Inc_Mid+0x7c>
	  WS2812B_Send_Pixel(r,g,b);
    }
	
	_delay_us(100);
  }
}
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	cf 90       	pop	r12
     818:	bf 90       	pop	r11
     81a:	af 90       	pop	r10
     81c:	9f 90       	pop	r9
     81e:	8f 90       	pop	r8
     820:	7f 90       	pop	r7
     822:	6f 90       	pop	r6
     824:	5f 90       	pop	r5
     826:	4f 90       	pop	r4
     828:	3f 90       	pop	r3
     82a:	2f 90       	pop	r2
     82c:	08 95       	ret

0000082e <RGB_Animation_Slide_Fill_Mid>:
	RGBAnim.PixelBuf[i]=0;
  }
}


void RGB_Animation_Slide_Fill_Mid(uint8_t r, uint8_t g, uint8_t b){
     82e:	af 92       	push	r10
     830:	bf 92       	push	r11
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	a8 2e       	mov	r10, r24
     844:	b6 2e       	mov	r11, r22
     846:	d4 2e       	mov	r13, r20
     848:	65 e4       	ldi	r22, 0x45	; 69
     84a:	e6 2e       	mov	r14, r22
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	f6 2e       	mov	r15, r22
     850:	87 01       	movw	r16, r14
     852:	01 5c       	subi	r16, 0xC1	; 193
     854:	1f 4f       	sbci	r17, 0xFF	; 255
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS/2;i++){
    RGB_Brightness_Inc_Mid(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
     85a:	cc 24       	eor	r12, r12
     85c:	c3 94       	inc	r12
}


void RGB_Animation_Slide_Fill_Mid(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS/2;i++){
    RGB_Brightness_Inc_Mid(r,g,b,i);
     85e:	8a 2d       	mov	r24, r10
     860:	6b 2d       	mov	r22, r11
     862:	4d 2d       	mov	r20, r13
     864:	9e 01       	movw	r18, r28
     866:	0e 94 75 03 	call	0x6ea	; 0x6ea <RGB_Brightness_Inc_Mid>
	RGBAnim.PixelBuf[i]=1;
     86a:	f7 01       	movw	r30, r14
     86c:	c1 92       	st	Z+, r12
     86e:	7f 01       	movw	r14, r30
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
     870:	f8 01       	movw	r30, r16
     872:	c0 82       	st	Z, r12
  }
}


void RGB_Animation_Slide_Fill_Mid(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS/2;i++){
     874:	21 96       	adiw	r28, 0x01	; 1
     876:	01 50       	subi	r16, 0x01	; 1
     878:	10 40       	sbci	r17, 0x00	; 0
     87a:	c0 32       	cpi	r28, 0x20	; 32
     87c:	d1 05       	cpc	r29, r1
     87e:	79 f7       	brne	.-34     	; 0x85e <RGB_Animation_Slide_Fill_Mid+0x30>
    RGB_Brightness_Inc_Mid(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
  }
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	bf 90       	pop	r11
     892:	af 90       	pop	r10
     894:	08 95       	ret

00000896 <RGB_Brightness_Dec>:
    }
	_delay_us(100);
  }
}

void RGB_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     896:	2f 92       	push	r2
     898:	3f 92       	push	r3
     89a:	4f 92       	push	r4
     89c:	5f 92       	push	r5
     89e:	6f 92       	push	r6
     8a0:	7f 92       	push	r7
     8a2:	8f 92       	push	r8
     8a4:	9f 92       	push	r9
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	df 93       	push	r29
     8b6:	cf 93       	push	r28
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	28 97       	sbiw	r28, 0x08	; 8
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	cd bf       	out	0x3d, r28	; 61
     8c8:	b8 2e       	mov	r11, r24
     8ca:	c6 2e       	mov	r12, r22
     8cc:	d4 2e       	mov	r13, r20
     8ce:	49 01       	movw	r8, r18
  RGBAnim.MaxVal=r;
     8d0:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     8d4:	86 17       	cp	r24, r22
     8d6:	10 f4       	brcc	.+4      	; 0x8dc <RGB_Brightness_Dec+0x46>
    RGBAnim.MaxVal=g;
     8d8:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     8dc:	80 91 44 01 	lds	r24, 0x0144
     8e0:	8d 15       	cp	r24, r13
     8e2:	10 f4       	brcc	.+4      	; 0x8e8 <RGB_Brightness_Dec+0x52>
    RGBAnim.MaxVal=b;
     8e4:	d0 92 44 01 	sts	0x0144, r13
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;
  
  if((RGBAnim.MaxVal % RGB_DEC_STEP)!=0){
     8e8:	20 91 44 01 	lds	r18, 0x0144
     8ec:	82 2f       	mov	r24, r18
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	87 70       	andi	r24, 0x07	; 7
     8f2:	90 70       	andi	r25, 0x00	; 0
     8f4:	00 97       	sbiw	r24, 0x00	; 0
     8f6:	19 f0       	breq	.+6      	; 0x8fe <RGB_Brightness_Dec+0x68>
    uint16_t temp=RGBAnim.MaxVal % RGB_DEC_STEP;
	RGBAnim.MaxVal-=temp;
     8f8:	28 1b       	sub	r18, r24
     8fa:	20 93 44 01 	sts	0x0144, r18
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
     8fe:	80 91 44 01 	lds	r24, 0x0144
     902:	08 2f       	mov	r16, r24
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	ee 24       	eor	r14, r14
     908:	ff 24       	eor	r15, r15
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     90a:	94 01       	movw	r18, r8
     90c:	2c 5b       	subi	r18, 0xBC	; 188
     90e:	3e 4f       	sbci	r19, 0xFE	; 254
     910:	3a 83       	std	Y+2, r19	; 0x02
     912:	29 83       	std	Y+1, r18	; 0x01
    }
	_delay_us(100);
  }
}

void RGB_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     914:	1c 83       	std	Y+4, r17	; 0x04
     916:	0b 83       	std	Y+3, r16	; 0x03
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
	  }
    }
	
	if(i>r){
     918:	8b 2d       	mov	r24, r11
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	9e 83       	std	Y+6, r25	; 0x06
     91e:	8d 83       	std	Y+5, r24	; 0x05
	  temp[0]=r;
	}else{
	  temp[0]=i;
	}
	
	if(i>g){
     920:	2c 2c       	mov	r2, r12
     922:	33 24       	eor	r3, r3
	  temp[1]=g;
	}else{
	  temp[1]=i;
	}
	
	if(i>b){
     924:	4d 2c       	mov	r4, r13
     926:	55 24       	eor	r5, r5
  if((RGBAnim.MaxVal % RGB_DEC_STEP)!=0){
    uint16_t temp=RGBAnim.MaxVal % RGB_DEC_STEP;
	RGBAnim.MaxVal-=temp;
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
     928:	c8 01       	movw	r24, r16
     92a:	88 7f       	andi	r24, 0xF8	; 248
     92c:	90 70       	andi	r25, 0x00	; 0
     92e:	08 96       	adiw	r24, 0x08	; 8
     930:	66 24       	eor	r6, r6
     932:	77 24       	eor	r7, r7
     934:	68 1a       	sub	r6, r24
     936:	79 0a       	sbc	r7, r25
     938:	54 c0       	rjmp	.+168    	; 0x9e2 <__stack+0xe3>
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
     93a:	ef 81       	ldd	r30, Y+7	; 0x07
     93c:	f8 85       	ldd	r31, Y+8	; 0x08
     93e:	81 81       	ldd	r24, Z+1	; 0x01
     940:	88 23       	and	r24, r24
     942:	21 f0       	breq	.+8      	; 0x94c <__stack+0x4d>
	    WS2812B_Send_Pixel(r,g,b);
     944:	8b 2d       	mov	r24, r11
     946:	6c 2d       	mov	r22, r12
     948:	4d 2d       	mov	r20, r13
     94a:	03 c0       	rjmp	.+6      	; 0x952 <__stack+0x53>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     956:	2f 81       	ldd	r18, Y+7	; 0x07
     958:	38 85       	ldd	r19, Y+8	; 0x08
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	38 87       	std	Y+8, r19	; 0x08
     960:	2f 83       	std	Y+7, r18	; 0x07
	RGBAnim.MaxVal-=temp;
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     962:	8f 81       	ldd	r24, Y+7	; 0x07
     964:	98 85       	ldd	r25, Y+8	; 0x08
     966:	e9 81       	ldd	r30, Y+1	; 0x01
     968:	fa 81       	ldd	r31, Y+2	; 0x02
     96a:	8e 17       	cp	r24, r30
     96c:	9f 07       	cpc	r25, r31
     96e:	29 f7       	brne	.-54     	; 0x93a <__stack+0x3b>
    }
	_delay_us(100);
  }
}

void RGB_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     970:	2b 81       	ldd	r18, Y+3	; 0x03
     972:	3c 81       	ldd	r19, Y+4	; 0x04
     974:	2e 0d       	add	r18, r14
     976:	3f 1d       	adc	r19, r15
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
	  }
    }
	
	if(i>r){
     978:	8d 81       	ldd	r24, Y+5	; 0x05
     97a:	9e 81       	ldd	r25, Y+6	; 0x06
     97c:	82 17       	cp	r24, r18
     97e:	93 07       	cpc	r25, r19
     980:	14 f4       	brge	.+4      	; 0x986 <__stack+0x87>
	  temp[0]=r;
     982:	8b 2d       	mov	r24, r11
     984:	01 c0       	rjmp	.+2      	; 0x988 <__stack+0x89>
     986:	80 2f       	mov	r24, r16
	}else{
	  temp[0]=i;
	}
	
	if(i>g){
     988:	22 16       	cp	r2, r18
     98a:	33 06       	cpc	r3, r19
     98c:	14 f4       	brge	.+4      	; 0x992 <__stack+0x93>
	  temp[1]=g;
     98e:	6c 2d       	mov	r22, r12
     990:	01 c0       	rjmp	.+2      	; 0x994 <__stack+0x95>
     992:	60 2f       	mov	r22, r16
	}else{
	  temp[1]=i;
	}
	
	if(i>b){
     994:	42 16       	cp	r4, r18
     996:	53 06       	cpc	r5, r19
     998:	14 f4       	brge	.+4      	; 0x99e <__stack+0x9f>
	  temp[2]=b;
     99a:	4d 2d       	mov	r20, r13
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	40 2f       	mov	r20, r16
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     9a0:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     9a4:	98 86       	std	Y+8, r9	; 0x08
     9a6:	8f 82       	std	Y+7, r8	; 0x07
     9a8:	0a c0       	rjmp	.+20     	; 0x9be <__stack+0xbf>
	
    for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	
    for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
     9b4:	ef 81       	ldd	r30, Y+7	; 0x07
     9b6:	f8 85       	ldd	r31, Y+8	; 0x08
     9b8:	31 96       	adiw	r30, 0x01	; 1
     9ba:	f8 87       	std	Y+8, r31	; 0x08
     9bc:	ef 83       	std	Y+7, r30	; 0x07
     9be:	2f 81       	ldd	r18, Y+7	; 0x07
     9c0:	38 85       	ldd	r19, Y+8	; 0x08
     9c2:	21 34       	cpi	r18, 0x41	; 65
     9c4:	31 05       	cpc	r19, r1
     9c6:	88 f3       	brcs	.-30     	; 0x9aa <__stack+0xab>
     9c8:	8c e2       	ldi	r24, 0x2C	; 44
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <__stack+0xcd>
  if((RGBAnim.MaxVal % RGB_DEC_STEP)!=0){
    uint16_t temp=RGBAnim.MaxVal % RGB_DEC_STEP;
	RGBAnim.MaxVal-=temp;
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
     9d0:	08 50       	subi	r16, 0x08	; 8
     9d2:	10 40       	sbci	r17, 0x00	; 0
     9d4:	88 ef       	ldi	r24, 0xF8	; 248
     9d6:	9f ef       	ldi	r25, 0xFF	; 255
     9d8:	e8 0e       	add	r14, r24
     9da:	f9 1e       	adc	r15, r25
     9dc:	e6 14       	cp	r14, r6
     9de:	f7 04       	cpc	r15, r7
     9e0:	29 f0       	breq	.+10     	; 0x9ec <__stack+0xed>
     9e2:	e4 e4       	ldi	r30, 0x44	; 68
     9e4:	f1 e0       	ldi	r31, 0x01	; 1
     9e6:	f8 87       	std	Y+8, r31	; 0x08
     9e8:	ef 83       	std	Y+7, r30	; 0x07
     9ea:	bb cf       	rjmp	.-138    	; 0x962 <__stack+0x63>
      WS2812B_Send_Pixel(0,0,0);
    }
	
	_delay_us(100);
  }
}
     9ec:	28 96       	adiw	r28, 0x08	; 8
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	cf 91       	pop	r28
     9fa:	df 91       	pop	r29
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	9f 90       	pop	r9
     a0c:	8f 90       	pop	r8
     a0e:	7f 90       	pop	r7
     a10:	6f 90       	pop	r6
     a12:	5f 90       	pop	r5
     a14:	4f 90       	pop	r4
     a16:	3f 90       	pop	r3
     a18:	2f 90       	pop	r2
     a1a:	08 95       	ret

00000a1c <RGB_Animation_Slide_Unfill_Mid>:
	RGBAnim.PixelBuf[i]=1;
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
  }
}

void RGB_Animation_Slide_Unfill_Mid(uint8_t r, uint8_t g, uint8_t b){
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	d8 2e       	mov	r13, r24
     a2c:	e6 2e       	mov	r14, r22
     a2e:	f4 2e       	mov	r15, r20
     a30:	04 e8       	ldi	r16, 0x84	; 132
     a32:	11 e0       	ldi	r17, 0x01	; 1
     a34:	cf e3       	ldi	r28, 0x3F	; 63
     a36:	d0 e0       	ldi	r29, 0x00	; 0
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
    RGB_Brightness_Dec(r,g,b,i);
     a38:	8d 2d       	mov	r24, r13
     a3a:	6e 2d       	mov	r22, r14
     a3c:	4f 2d       	mov	r20, r15
     a3e:	9e 01       	movw	r18, r28
     a40:	0e 94 4b 04 	call	0x896	; 0x896 <RGB_Brightness_Dec>
	RGBAnim.PixelBuf[i]=0;
     a44:	f8 01       	movw	r30, r16
     a46:	10 82       	st	Z, r1
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
  }
}

void RGB_Animation_Slide_Unfill_Mid(uint8_t r, uint8_t g, uint8_t b){
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
     a48:	21 97       	sbiw	r28, 0x01	; 1
     a4a:	01 50       	subi	r16, 0x01	; 1
     a4c:	10 40       	sbci	r17, 0x00	; 0
     a4e:	ff ef       	ldi	r31, 0xFF	; 255
     a50:	cf 3f       	cpi	r28, 0xFF	; 255
     a52:	df 07       	cpc	r29, r31
     a54:	89 f7       	brne	.-30     	; 0xa38 <RGB_Animation_Slide_Unfill_Mid+0x1c>
    RGB_Brightness_Dec(r,g,b,i);
	RGBAnim.PixelBuf[i]=0;
  }
}
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	08 95       	ret

00000a66 <RGB_Animation_Slide_Unfill>:
    RGB_Brightness_Inc(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
  }
}

void RGB_Animation_Slide_Unfill(uint8_t r, uint8_t g, uint8_t b){
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	d8 2e       	mov	r13, r24
     a76:	e6 2e       	mov	r14, r22
     a78:	f4 2e       	mov	r15, r20
     a7a:	04 e8       	ldi	r16, 0x84	; 132
     a7c:	11 e0       	ldi	r17, 0x01	; 1
     a7e:	cf e3       	ldi	r28, 0x3F	; 63
     a80:	d0 e0       	ldi	r29, 0x00	; 0
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
    RGB_Brightness_Dec(r,g,b,i);
     a82:	8d 2d       	mov	r24, r13
     a84:	6e 2d       	mov	r22, r14
     a86:	4f 2d       	mov	r20, r15
     a88:	9e 01       	movw	r18, r28
     a8a:	0e 94 4b 04 	call	0x896	; 0x896 <RGB_Brightness_Dec>
	RGBAnim.PixelBuf[i]=0;
     a8e:	f8 01       	movw	r30, r16
     a90:	10 82       	st	Z, r1
	RGBAnim.PixelBuf[i]=1;
  }
}

void RGB_Animation_Slide_Unfill(uint8_t r, uint8_t g, uint8_t b){
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
     a92:	21 97       	sbiw	r28, 0x01	; 1
     a94:	01 50       	subi	r16, 0x01	; 1
     a96:	10 40       	sbci	r17, 0x00	; 0
     a98:	ff ef       	ldi	r31, 0xFF	; 255
     a9a:	cf 3f       	cpi	r28, 0xFF	; 255
     a9c:	df 07       	cpc	r29, r31
     a9e:	89 f7       	brne	.-30     	; 0xa82 <RGB_Animation_Slide_Unfill+0x1c>
    RGB_Brightness_Dec(r,g,b,i);
	RGBAnim.PixelBuf[i]=0;
  }
}
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	ef 90       	pop	r14
     aac:	df 90       	pop	r13
     aae:	08 95       	ret

00000ab0 <RGB_Brightness_Inc>:
	WS2812B_Send_Pixel(0,0,0);
  }
}


void RGB_Brightness_Inc(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     ab0:	2f 92       	push	r2
     ab2:	3f 92       	push	r3
     ab4:	4f 92       	push	r4
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	df 92       	push	r13
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	00 d0       	rcall	.+0      	; 0xad4 <RGB_Brightness_Inc+0x24>
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <RGB_Brightness_Inc+0x26>
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	d8 2e       	mov	r13, r24
     adc:	e6 2e       	mov	r14, r22
     ade:	f4 2e       	mov	r15, r20
     ae0:	29 01       	movw	r4, r18
  RGBAnim.MaxVal=r;
     ae2:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     ae6:	86 17       	cp	r24, r22
     ae8:	10 f4       	brcc	.+4      	; 0xaee <RGB_Brightness_Inc+0x3e>
    RGBAnim.MaxVal=g;
     aea:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     aee:	80 91 44 01 	lds	r24, 0x0144
     af2:	8f 15       	cp	r24, r15
     af4:	10 f4       	brcc	.+4      	; 0xafa <RGB_Brightness_Inc+0x4a>
    RGBAnim.MaxVal=b;
     af6:	f0 92 44 01 	sts	0x0144, r15
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;
  
  if((RGBAnim.MaxVal % RGB_INC_STEP)!=0){
     afa:	20 91 44 01 	lds	r18, 0x0144
     afe:	82 2f       	mov	r24, r18
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	87 70       	andi	r24, 0x07	; 7
     b04:	90 70       	andi	r25, 0x00	; 0
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	19 f0       	breq	.+6      	; 0xb10 <RGB_Brightness_Inc+0x60>
    uint16_t temp=RGBAnim.MaxVal % RGB_INC_STEP;
	RGBAnim.MaxVal-=temp;
     b0a:	28 1b       	sub	r18, r24
     b0c:	20 93 44 01 	sts	0x0144, r18
  }
  
  uint16_t loop_cnt=RGBAnim.MaxVal/3;
     b10:	80 91 44 01 	lds	r24, 0x0144
     b14:	63 e0       	ldi	r22, 0x03	; 3
     b16:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__udivmodqi4>
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	3a 83       	std	Y+2, r19	; 0x02
     b20:	29 83       	std	Y+1, r18	; 0x01
     b22:	00 e0       	ldi	r16, 0x00	; 0
     b24:	10 e0       	ldi	r17, 0x00	; 0
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
	
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     b26:	74 e4       	ldi	r23, 0x44	; 68
     b28:	27 2e       	mov	r2, r23
     b2a:	71 e0       	ldi	r23, 0x01	; 1
     b2c:	37 2e       	mov	r3, r23
     b2e:	24 0c       	add	r2, r4
     b30:	35 1c       	adc	r3, r5
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     b32:	6d 2c       	mov	r6, r13
     b34:	77 24       	eor	r7, r7
     b36:	8e 2c       	mov	r8, r14
     b38:	99 24       	eor	r9, r9
     b3a:	af 2c       	mov	r10, r15
     b3c:	bb 24       	eor	r11, r11
     b3e:	43 c0       	rjmp	.+134    	; 0xbc6 <RGB_Brightness_Inc+0x116>
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
	
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
     b40:	eb 81       	ldd	r30, Y+3	; 0x03
     b42:	fc 81       	ldd	r31, Y+4	; 0x04
     b44:	81 81       	ldd	r24, Z+1	; 0x01
     b46:	88 23       	and	r24, r24
     b48:	21 f0       	breq	.+8      	; 0xb52 <RGB_Brightness_Inc+0xa2>
	    WS2812B_Send_Pixel(r,g,b);
     b4a:	8d 2d       	mov	r24, r13
     b4c:	6e 2d       	mov	r22, r14
     b4e:	4f 2d       	mov	r20, r15
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <RGB_Brightness_Inc+0xa8>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     b5c:	2b 81       	ldd	r18, Y+3	; 0x03
     b5e:	3c 81       	ldd	r19, Y+4	; 0x04
     b60:	2f 5f       	subi	r18, 0xFF	; 255
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	3c 83       	std	Y+4, r19	; 0x04
     b66:	2b 83       	std	Y+3, r18	; 0x03
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
	
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	82 15       	cp	r24, r2
     b6e:	93 05       	cpc	r25, r3
     b70:	39 f7       	brne	.-50     	; 0xb40 <RGB_Brightness_Inc+0x90>
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     b72:	20 2f       	mov	r18, r16
     b74:	60 16       	cp	r6, r16
     b76:	71 06       	cpc	r7, r17
     b78:	08 f4       	brcc	.+2      	; 0xb7c <RGB_Brightness_Inc+0xcc>
     b7a:	26 2d       	mov	r18, r6
     b7c:	60 2f       	mov	r22, r16
     b7e:	80 16       	cp	r8, r16
     b80:	91 06       	cpc	r9, r17
     b82:	08 f4       	brcc	.+2      	; 0xb86 <RGB_Brightness_Inc+0xd6>
     b84:	68 2d       	mov	r22, r8
     b86:	40 2f       	mov	r20, r16
     b88:	a0 16       	cp	r10, r16
     b8a:	b1 06       	cpc	r11, r17
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <RGB_Brightness_Inc+0xe0>
     b8e:	4a 2d       	mov	r20, r10
     b90:	82 2f       	mov	r24, r18
     b92:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
     b96:	5c 82       	std	Y+4, r5	; 0x04
     b98:	4b 82       	std	Y+3, r4	; 0x03
     b9a:	0a c0       	rjmp	.+20     	; 0xbb0 <RGB_Brightness_Inc+0x100>
	
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
     ba6:	eb 81       	ldd	r30, Y+3	; 0x03
     ba8:	fc 81       	ldd	r31, Y+4	; 0x04
     baa:	31 96       	adiw	r30, 0x01	; 1
     bac:	fc 83       	std	Y+4, r31	; 0x04
     bae:	eb 83       	std	Y+3, r30	; 0x03
     bb0:	2b 81       	ldd	r18, Y+3	; 0x03
     bb2:	3c 81       	ldd	r19, Y+4	; 0x04
     bb4:	21 34       	cpi	r18, 0x41	; 65
     bb6:	31 05       	cpc	r19, r1
     bb8:	88 f3       	brcs	.-30     	; 0xb9c <RGB_Brightness_Inc+0xec>
     bba:	8c e2       	ldi	r24, 0x2C	; 44
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <RGB_Brightness_Inc+0x10e>
	RGBAnim.MaxVal-=temp;
  }
  
  uint16_t loop_cnt=RGBAnim.MaxVal/3;
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
     bc2:	08 5f       	subi	r16, 0xF8	; 248
     bc4:	1f 4f       	sbci	r17, 0xFF	; 255
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	9a 81       	ldd	r25, Y+2	; 0x02
     bca:	08 17       	cp	r16, r24
     bcc:	19 07       	cpc	r17, r25
     bce:	28 f4       	brcc	.+10     	; 0xbda <RGB_Brightness_Inc+0x12a>
     bd0:	e4 e4       	ldi	r30, 0x44	; 68
     bd2:	f1 e0       	ldi	r31, 0x01	; 1
     bd4:	fc 83       	std	Y+4, r31	; 0x04
     bd6:	eb 83       	std	Y+3, r30	; 0x03
     bd8:	c7 cf       	rjmp	.-114    	; 0xb68 <RGB_Brightness_Inc+0xb8>
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
    }
	_delay_us(100);
  }
}
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	3f 90       	pop	r3
     c02:	2f 90       	pop	r2
     c04:	08 95       	ret

00000c06 <RGB_Animation_Slide_Fill>:
}




void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	d8 2e       	mov	r13, r24
     c18:	e6 2e       	mov	r14, r22
     c1a:	f4 2e       	mov	r15, r20
     c1c:	05 e4       	ldi	r16, 0x45	; 69
     c1e:	11 e0       	ldi	r17, 0x01	; 1
     c20:	c0 e0       	ldi	r28, 0x00	; 0
     c22:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    RGB_Brightness_Inc(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
     c24:	cc 24       	eor	r12, r12
     c26:	c3 94       	inc	r12



void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    RGB_Brightness_Inc(r,g,b,i);
     c28:	8d 2d       	mov	r24, r13
     c2a:	6e 2d       	mov	r22, r14
     c2c:	4f 2d       	mov	r20, r15
     c2e:	9e 01       	movw	r18, r28
     c30:	0e 94 58 05 	call	0xab0	; 0xab0 <RGB_Brightness_Inc>
	RGBAnim.PixelBuf[i]=1;
     c34:	f8 01       	movw	r30, r16
     c36:	c1 92       	st	Z+, r12
     c38:	8f 01       	movw	r16, r30




void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     c3a:	21 96       	adiw	r28, 0x01	; 1
     c3c:	c0 34       	cpi	r28, 0x40	; 64
     c3e:	d1 05       	cpc	r29, r1
     c40:	99 f7       	brne	.-26     	; 0xc28 <RGB_Animation_Slide_Fill+0x22>
    RGB_Brightness_Inc(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
  }
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	08 95       	ret

00000c54 <RGB_Animation_Clear_All_Pixels>:
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
  }
}

void RGB_Animation_Clear_All_Pixels(void){
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	c0 e0       	ldi	r28, 0x00	; 0
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t j=0;j<WS2812B_TOTAL_PIXEL_CLEAR;j++){
	WS2812B_Send_Pixel(0,0,0);
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	0e 94 23 01 	call	0x246	; 0x246 <WS2812B_Send_Pixel>
	RGBAnim.PixelBuf[i]=0;
  }
}

void RGB_Animation_Clear_All_Pixels(void){
  for(uint16_t j=0;j<WS2812B_TOTAL_PIXEL_CLEAR;j++){
     c66:	21 96       	adiw	r28, 0x01	; 1
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	cc 32       	cpi	r28, 0x2C	; 44
     c6c:	d8 07       	cpc	r29, r24
     c6e:	b1 f7       	brne	.-20     	; 0xc5c <RGB_Animation_Clear_All_Pixels+0x8>
	WS2812B_Send_Pixel(0,0,0);
  }
}
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <RGB_Animation_Init>:
  }
}


void RGB_Animation_Init(void){
  red=RED_MAX;
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	80 93 36 01 	sts	0x0136, r24
  red_dir=HALT;
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	80 93 39 01 	sts	0x0139, r24
  green_dir=HALT;
     c82:	80 93 3a 01 	sts	0x013A, r24
  blue_dir=HALT;
     c86:	80 93 3b 01 	sts	0x013B, r24
     c8a:	88 ee       	ldi	r24, 0xE8	; 232
     c8c:	93 e0       	ldi	r25, 0x03	; 3
     c8e:	2c e2       	ldi	r18, 0x2C	; 44
     c90:	31 e0       	ldi	r19, 0x01	; 1
     c92:	f9 01       	movw	r30, r18
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <RGB_Animation_Init+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c9a:	d9 f7       	brne	.-10     	; 0xc92 <RGB_Animation_Init+0x1c>
  _delay_ms(100);
  RGB_Animation_Clear_All_Pixels();
     c9c:	0e 94 2a 06 	call	0xc54	; 0xc54 <RGB_Animation_Clear_All_Pixels>
     ca0:	88 ee       	ldi	r24, 0xE8	; 232
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	2c e2       	ldi	r18, 0x2C	; 44
     ca6:	31 e0       	ldi	r19, 0x01	; 1
     ca8:	f9 01       	movw	r30, r18
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <RGB_Animation_Init+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb0:	d9 f7       	brne	.-10     	; 0xca8 <RGB_Animation_Init+0x32>
     cb2:	e5 e4       	ldi	r30, 0x45	; 69
     cb4:	f1 e0       	ldi	r31, 0x01	; 1

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
     cb6:	11 92       	st	Z+, r1
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	e5 38       	cpi	r30, 0x85	; 133
     cbc:	f8 07       	cpc	r31, r24
     cbe:	d9 f7       	brne	.-10     	; 0xcb6 <RGB_Animation_Init+0x40>
  _delay_ms(100);
  RGB_Animation_Clear_All_Pixels();
  _delay_ms(100);
  RGB_Animation_Clear_Pixel_Buf();
  
     cc0:	08 95       	ret

00000cc2 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     cc2:	10 92 85 01 	sts	0x0185, r1
  debug.datareg=0;
     cc6:	10 92 86 01 	sts	0x0186, r1
  debug.databsy=1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 87 01 	sts	0x0187, r24
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     cd4:	fc 01       	movw	r30, r24
     cd6:	eb 57       	subi	r30, 0x7B	; 123
     cd8:	fe 4f       	sbci	r31, 0xFE	; 254
     cda:	13 82       	std	Z+3, r1	; 0x03
     cdc:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     cde:	80 32       	cpi	r24, 0x20	; 32
     ce0:	91 05       	cpc	r25, r1
     ce2:	c1 f7       	brne	.-16     	; 0xcd4 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     ce4:	10 92 a8 01 	sts	0x01A8, r1
     ce8:	e9 ea       	ldi	r30, 0xA9	; 169
     cea:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     cec:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	e1 3b       	cpi	r30, 0xB1	; 177
     cf2:	f8 07       	cpc	r31, r24
     cf4:	d9 f7       	brne	.-10     	; 0xcec <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     cf6:	10 82       	st	Z, r1
}
     cf8:	08 95       	ret

00000cfa <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     cfa:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     cfc:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     cfe:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     d06:	e8 e6       	ldi	r30, 0x68	; 104
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	82 60       	ori	r24, 0x02	; 2
     d0e:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     d10:	ec e6       	ldi	r30, 0x6C	; 108
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	80 64       	ori	r24, 0x40	; 64
     d18:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     d1a:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     d1c:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     d1e:	08 95       	ret

00000d20 <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     d20:	8f ef       	ldi	r24, 0xFF	; 255
     d22:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     d24:	ee e6       	ldi	r30, 0x6E	; 110
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	10 82       	st	Z, r1
  TCNT0 =200;
     d2a:	88 ec       	ldi	r24, 0xC8	; 200
     d2c:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     d36:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     d38:	08 95       	ret

00000d3a <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     d3a:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     d3e:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     d40:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     d42:	08 95       	ret

00000d44 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     d44:	54 9a       	sbi	0x0a, 4	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     d46:	5c 9a       	sbi	0x0b, 4	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     d48:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     d4a:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     d4c:	08 95       	ret

00000d4e <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     d4e:	5c 9a       	sbi	0x0b, 4	; 11
}
     d50:	08 95       	ret

00000d52 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     d52:	5c 98       	cbi	0x0b, 4	; 11
}
     d54:	08 95       	ret

00000d56 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	11 f4       	brne	.+4      	; 0xd5e <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     d5a:	5c 9a       	sbi	0x0b, 4	; 11
     d5c:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     d5e:	5c 98       	cbi	0x0b, 4	; 11
     d60:	08 95       	ret

00000d62 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     d62:	86 b1       	in	r24, 0x06	; 6
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	26 e0       	ldi	r18, 0x06	; 6
     d68:	96 95       	lsr	r25
     d6a:	87 95       	ror	r24
     d6c:	2a 95       	dec	r18
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     d70:	81 70       	andi	r24, 0x01	; 1
     d72:	08 95       	ret

00000d74 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     d74:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     d76:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     d7c:	86 b5       	in	r24, 0x26	; 38
     d7e:	82 33       	cpi	r24, 0x32	; 50
     d80:	e8 f3       	brcs	.-6      	; 0xd7c <debug_delay+0x8>
    TCNT0=0;
     d82:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     d84:	86 b5       	in	r24, 0x26	; 38
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	82 17       	cp	r24, r18
     d8a:	93 07       	cpc	r25, r19
     d8c:	d8 f3       	brcs	.-10     	; 0xd84 <debug_delay+0x10>
  TCCR0B=0;
     d8e:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     d90:	08 95       	ret

00000d92 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     d92:	80 91 2c 01 	lds	r24, 0x012C
     d96:	90 91 2d 01 	lds	r25, 0x012D
     d9a:	0e 94 ba 06 	call	0xd74	; 0xd74 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     d9e:	08 95       	ret

00000da0 <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     da0:	80 91 2e 01 	lds	r24, 0x012E
     da4:	90 91 2f 01 	lds	r25, 0x012F
     da8:	0e 94 ba 06 	call	0xd74	; 0xd74 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     dac:	08 95       	ret

00000dae <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     dae:	80 91 30 01 	lds	r24, 0x0130
     db2:	90 91 31 01 	lds	r25, 0x0131
     db6:	0e 94 ba 06 	call	0xd74	; 0xd74 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     dba:	08 95       	ret

00000dbc <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	2a 97       	sbiw	r28, 0x0a	; 10
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
     dda:	fe 01       	movw	r30, r28
     ddc:	31 96       	adiw	r30, 0x01	; 1
     dde:	9a e0       	ldi	r25, 0x0A	; 10
     de0:	df 01       	movw	r26, r30
     de2:	1d 92       	st	X+, r1
     de4:	9a 95       	dec	r25
     de6:	e9 f7       	brne	.-6      	; 0xde2 <debug_tx_byte+0x26>
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	9a 87       	std	Y+10, r25	; 0x0a
     dec:	fe 01       	movw	r30, r28
     dee:	32 96       	adiw	r30, 0x02	; 2
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     df4:	48 2f       	mov	r20, r24
     df6:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
     df8:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
     dfa:	ca 01       	movw	r24, r20
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <debug_tx_byte+0x48>
     e00:	95 95       	asr	r25
     e02:	87 95       	ror	r24
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <debug_tx_byte+0x44>
     e08:	80 ff       	sbrs	r24, 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <debug_tx_byte+0x54>
	  buf[i+1]=1;
     e0c:	60 83       	st	Z, r22
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
     e10:	10 82       	st	Z, r1
     e12:	2f 5f       	subi	r18, 0xFF	; 255
     e14:	3f 4f       	sbci	r19, 0xFF	; 255
     e16:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
     e18:	28 30       	cpi	r18, 0x08	; 8
     e1a:	31 05       	cpc	r19, r1
     e1c:	71 f7       	brne	.-36     	; 0xdfa <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
     e1e:	df b6       	in	r13, 0x3f	; 63
  cli();
     e20:	f8 94       	cli
     e22:	8e 01       	movw	r16, r28
     e24:	0f 5f       	subi	r16, 0xFF	; 255
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
     e28:	3b e0       	ldi	r19, 0x0B	; 11
     e2a:	e3 2e       	mov	r14, r19
     e2c:	f1 2c       	mov	r15, r1
     e2e:	ec 0e       	add	r14, r28
     e30:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     e32:	f8 01       	movw	r30, r16
     e34:	80 81       	ld	r24, Z
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	11 f4       	brne	.+4      	; 0xe3e <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     e3a:	5c 9a       	sbi	0x0b, 4	; 11
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     e3e:	5c 98       	cbi	0x0b, 4	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
     e40:	0e 94 c9 06 	call	0xd92	; 0xd92 <debug_delay_index_0>
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
     e48:	0e 15       	cp	r16, r14
     e4a:	1f 05       	cpc	r17, r15
     e4c:	91 f7       	brne	.-28     	; 0xe32 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
     e4e:	df be       	out	0x3f, r13	; 63
}
     e50:	2a 96       	adiw	r28, 0x0a	; 10
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	08 95       	ret

00000e6c <debug_rx_byte>:

uint8_t debug_rx_byte(void){
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     e72:	36 9b       	sbis	0x06, 6	; 6
     e74:	21 c0       	rjmp	.+66     	; 0xeb8 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	17 c0       	rjmp	.+46     	; 0xea8 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
     e7a:	0e 94 d0 06 	call	0xda0	; 0xda0 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     e7e:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
     e80:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
     e82:	17 30       	cpi	r17, 0x07	; 7
     e84:	09 f0       	breq	.+2      	; 0xe88 <debug_rx_byte+0x1c>
	    val>>=1;
     e86:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
     e88:	1f 5f       	subi	r17, 0xFF	; 255
     e8a:	18 30       	cpi	r17, 0x08	; 8
     e8c:	b1 f7       	brne	.-20     	; 0xe7a <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
     e8e:	0e 94 d0 06 	call	0xda0	; 0xda0 <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     e92:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
     e94:	f6 fc       	sbrc	r15, 6
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <debug_rx_byte+0x3a>
     e98:	86 ff       	sbrs	r24, 6
     e9a:	05 c0       	rjmp	.+10     	; 0xea6 <debug_rx_byte+0x3a>
	  debug.datareg=val;
     e9c:	00 93 86 01 	sts	0x0186, r16
	  debug.error=0x00;
     ea0:	10 92 85 01 	sts	0x0185, r1
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	80 93 85 01 	sts	0x0185, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
     eac:	80 91 86 01 	lds	r24, 0x0186
}
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
     eb8:	0e 94 d7 06 	call	0xdae	; 0xdae <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     ebc:	f6 b0       	in	r15, 0x06	; 6
     ebe:	00 e0       	ldi	r16, 0x00	; 0
     ec0:	10 e0       	ldi	r17, 0x00	; 0
     ec2:	db cf       	rjmp	.-74     	; 0xe7a <debug_rx_byte+0xe>

00000ec4 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
     ec4:	80 91 86 01 	lds	r24, 0x0186
}
     ec8:	08 95       	ret

00000eca <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
     eca:	10 92 86 01 	sts	0x0186, r1
}
     ece:	08 95       	ret

00000ed0 <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
     ed0:	80 93 86 01 	sts	0x0186, r24
}
     ed4:	08 95       	ret

00000ed6 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
     ed6:	bf 92       	push	r11
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	7b 01       	movw	r14, r22
     eea:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	e8 16       	cp	r14, r24
     ef0:	f1 04       	cpc	r15, r1
     ef2:	01 05       	cpc	r16, r1
     ef4:	11 05       	cpc	r17, r1
     ef6:	09 f0       	breq	.+2      	; 0xefa <debug_tx_hex+0x24>
     ef8:	30 f4       	brcc	.+12     	; 0xf06 <debug_tx_hex+0x30>
     efa:	c8 e0       	ldi	r28, 0x08	; 8
     efc:	d0 e0       	ldi	r29, 0x00	; 0
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	c6 2e       	mov	r12, r22
     f02:	d1 2c       	mov	r13, r1
     f04:	14 c0       	rjmp	.+40     	; 0xf2e <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	e8 16       	cp	r14, r24
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	f8 06       	cpc	r15, r24
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	08 07       	cpc	r16, r24
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	18 07       	cpc	r17, r24
     f16:	30 f0       	brcs	.+12     	; 0xf24 <debug_tx_hex+0x4e>
     f18:	c0 e2       	ldi	r28, 0x20	; 32
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
     f1c:	58 e0       	ldi	r21, 0x08	; 8
     f1e:	c5 2e       	mov	r12, r21
     f20:	d1 2c       	mov	r13, r1
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <debug_tx_hex+0x58>
     f24:	c0 e1       	ldi	r28, 0x10	; 16
     f26:	d0 e0       	ldi	r29, 0x00	; 0
     f28:	44 e0       	ldi	r20, 0x04	; 4
     f2a:	c4 2e       	mov	r12, r20
     f2c:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
     f2e:	80 e3       	ldi	r24, 0x30	; 48
     f30:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
  debug_tx_byte('x');
     f34:	88 e7       	ldi	r24, 0x78	; 120
     f36:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
     f3a:	bb 24       	eor	r11, r11
     f3c:	17 c0       	rjmp	.+46     	; 0xf6c <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     f3e:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     f40:	d8 01       	movw	r26, r16
     f42:	c7 01       	movw	r24, r14
     f44:	0c 2e       	mov	r0, r28
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <debug_tx_hex+0x7a>
     f48:	b6 95       	lsr	r27
     f4a:	a7 95       	ror	r26
     f4c:	97 95       	ror	r25
     f4e:	87 95       	ror	r24
     f50:	0a 94       	dec	r0
     f52:	d2 f7       	brpl	.-12     	; 0xf48 <debug_tx_hex+0x72>
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	8f 70       	andi	r24, 0x0F	; 15
     f58:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     f5a:	8a 30       	cpi	r24, 0x0A	; 10
     f5c:	91 05       	cpc	r25, r1
     f5e:	10 f0       	brcs	.+4      	; 0xf64 <debug_tx_hex+0x8e>
	    hex_digit+=55;
     f60:	c7 96       	adiw	r24, 0x37	; 55
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
     f64:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
     f66:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     f6a:	b3 94       	inc	r11
     f6c:	8b 2d       	mov	r24, r11
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	8c 15       	cp	r24, r12
     f72:	9d 05       	cpc	r25, r13
     f74:	20 f3       	brcs	.-56     	; 0xf3e <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	bf 90       	pop	r11
     f88:	08 95       	ret

00000f8a <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	7b 01       	movw	r14, r22
     fa0:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     fa2:	6f 3f       	cpi	r22, 0xFF	; 255
     fa4:	71 05       	cpc	r23, r1
     fa6:	81 05       	cpc	r24, r1
     fa8:	91 05       	cpc	r25, r1
     faa:	09 f0       	breq	.+2      	; 0xfae <debug_tx_bin+0x24>
     fac:	18 f4       	brcc	.+6      	; 0xfb4 <debug_tx_bin+0x2a>
     fae:	f7 e0       	ldi	r31, 0x07	; 7
     fb0:	df 2e       	mov	r13, r31
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     fb4:	60 30       	cpi	r22, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	73 07       	cpc	r23, r19
     fba:	31 e0       	ldi	r19, 0x01	; 1
     fbc:	83 07       	cpc	r24, r19
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	93 07       	cpc	r25, r19
     fc2:	18 f0       	brcs	.+6      	; 0xfca <debug_tx_bin+0x40>
     fc4:	ef e1       	ldi	r30, 0x1F	; 31
     fc6:	de 2e       	mov	r13, r30
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <debug_tx_bin+0x44>
     fca:	7f e0       	ldi	r23, 0x0F	; 15
     fcc:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
     fce:	80 e3       	ldi	r24, 0x30	; 48
     fd0:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
  debug_tx_byte('b');
     fd4:	82 e6       	ldi	r24, 0x62	; 98
     fd6:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
     fda:	c0 e0       	ldi	r28, 0x00	; 0
     fdc:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
     fde:	cd 2c       	mov	r12, r13
     fe0:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
     fe2:	56 01       	movw	r10, r12
     fe4:	08 94       	sec
     fe6:	a1 1c       	adc	r10, r1
     fe8:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
     fea:	c6 01       	movw	r24, r12
     fec:	8c 1b       	sub	r24, r28
     fee:	9d 0b       	sbc	r25, r29
     ff0:	a8 01       	movw	r20, r16
     ff2:	97 01       	movw	r18, r14
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <debug_tx_bin+0x74>
     ff6:	56 95       	lsr	r21
     ff8:	47 95       	ror	r20
     ffa:	37 95       	ror	r19
     ffc:	27 95       	ror	r18
     ffe:	8a 95       	dec	r24
    1000:	d2 f7       	brpl	.-12     	; 0xff6 <debug_tx_bin+0x6c>
    1002:	da 01       	movw	r26, r20
    1004:	c9 01       	movw	r24, r18
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	89 2b       	or	r24, r25
    100c:	11 f0       	breq	.+4      	; 0x1012 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
    100e:	81 e3       	ldi	r24, 0x31	; 49
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
    1012:	80 e3       	ldi	r24, 0x30	; 48
    1014:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
    1018:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
    101a:	ca 15       	cp	r28, r10
    101c:	db 05       	cpc	r29, r11
    101e:	29 f7       	brne	.-54     	; 0xfea <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	08 95       	ret

00001036 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
    1036:	8d e0       	ldi	r24, 0x0D	; 13
    1038:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
  debug_tx_byte('\n');
    103c:	8a e0       	ldi	r24, 0x0A	; 10
    103e:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
}
    1042:	08 95       	ret

00001044 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
}
    104a:	08 95       	ret

0000104c <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
    104c:	8c e2       	ldi	r24, 0x2C	; 44
    104e:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
}
    1052:	08 95       	ret

00001054 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	ec 01       	movw	r28, r24
    105c:	10 e0       	ldi	r17, 0x00	; 0
    105e:	03 c0       	rjmp	.+6      	; 0x1066 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
    1060:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
        i++;
    1064:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    1066:	fe 01       	movw	r30, r28
    1068:	e1 0f       	add	r30, r17
    106a:	f1 1d       	adc	r31, r1
    106c:	80 81       	ld	r24, Z
    106e:	88 23       	and	r24, r24
    1070:	b9 f7       	brne	.-18     	; 0x1060 <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	08 95       	ret

0000107a <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
    107a:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_nl();
    107e:	0e 94 1b 08 	call	0x1036	; 0x1036 <debug_tx_nl>
}
    1082:	08 95       	ret

00001084 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
    1084:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    1088:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
}
    108c:	08 95       	ret

0000108e <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
    108e:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_cm();
    1092:	0e 94 26 08 	call	0x104c	; 0x104c <debug_tx_cm>
}
    1096:	08 95       	ret

00001098 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	6b 01       	movw	r12, r22
    10a8:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    10aa:	61 15       	cp	r22, r1
    10ac:	71 05       	cpc	r23, r1
    10ae:	81 05       	cpc	r24, r1
    10b0:	91 05       	cpc	r25, r1
    10b2:	31 f4       	brne	.+12     	; 0x10c0 <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
    10b4:	10 92 a9 01 	sts	0x01A9, r1
    debug.input_num_digits=1;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	80 93 b1 01 	sts	0x01B1, r24
    10be:	23 c0       	rjmp	.+70     	; 0x1106 <debug_determine_digit_numbers+0x6e>
    10c0:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
    10c2:	0b 2d       	mov	r16, r11
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	0b 57       	subi	r16, 0x7B	; 123
    10c8:	1e 4f       	sbci	r17, 0xFE	; 254
    10ca:	c7 01       	movw	r24, r14
    10cc:	b6 01       	movw	r22, r12
    10ce:	2a e0       	ldi	r18, 0x0A	; 10
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	0e 94 26 0a 	call	0x144c	; 0x144c <__udivmodsi4>
    10da:	f8 01       	movw	r30, r16
    10dc:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
    10de:	c7 01       	movw	r24, r14
    10e0:	b6 01       	movw	r22, r12
    10e2:	2a e0       	ldi	r18, 0x0A	; 10
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	0e 94 26 0a 	call	0x144c	; 0x144c <__udivmodsi4>
    10ee:	c9 01       	movw	r24, r18
    10f0:	da 01       	movw	r26, r20
    10f2:	6c 01       	movw	r12, r24
    10f4:	7d 01       	movw	r14, r26
      i++;
    10f6:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
    10f8:	c1 14       	cp	r12, r1
    10fa:	d1 04       	cpc	r13, r1
    10fc:	e1 04       	cpc	r14, r1
    10fe:	f1 04       	cpc	r15, r1
    1100:	01 f7       	brne	.-64     	; 0x10c2 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
    1102:	b0 92 b1 01 	sts	0x01B1, r11
  }
}
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	08 95       	ret

00001116 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
    1116:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
    1118:	10 91 b1 01 	lds	r17, 0x01B1
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
    111e:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
    1120:	e1 2f       	mov	r30, r17
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	eb 57       	subi	r30, 0x7B	; 123
    1126:	fe 4f       	sbci	r31, 0xFE	; 254
    1128:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
    112a:	80 5d       	subi	r24, 0xD0	; 208
    112c:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
    1130:	11 23       	and	r17, r17
    1132:	a9 f7       	brne	.-22     	; 0x111e <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
    1134:	1f 91       	pop	r17
    1136:	08 95       	ret

00001138 <debug_tx_number>:

void debug_tx_number(int32_t num){
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	7b 01       	movw	r14, r22
    1142:	8c 01       	movw	r16, r24
  if(num<0){
    1144:	97 ff       	sbrs	r25, 7
    1146:	0b c0       	rjmp	.+22     	; 0x115e <debug_tx_number+0x26>
    debug_tx_byte('-');
    1148:	8d e2       	ldi	r24, 0x2D	; 45
    114a:	0e 94 de 06 	call	0xdbc	; 0xdbc <debug_tx_byte>
	num=-num;
    114e:	10 95       	com	r17
    1150:	00 95       	com	r16
    1152:	f0 94       	com	r15
    1154:	e0 94       	com	r14
    1156:	e1 1c       	adc	r14, r1
    1158:	f1 1c       	adc	r15, r1
    115a:	01 1d       	adc	r16, r1
    115c:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
    115e:	c8 01       	movw	r24, r16
    1160:	b7 01       	movw	r22, r14
    1162:	0e 94 4c 08 	call	0x1098	; 0x1098 <debug_determine_digit_numbers>
  debug_tx_number_digits();
    1166:	0e 94 8b 08 	call	0x1116	; 0x1116 <debug_tx_number_digits>
}
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	08 95       	ret

00001174 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
    1174:	0e 94 9c 08 	call	0x1138	; 0x1138 <debug_tx_number>
  debug_tx_nl();
    1178:	0e 94 1b 08 	call	0x1036	; 0x1036 <debug_tx_nl>
}
    117c:	08 95       	ret

0000117e <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
    117e:	0e 94 9c 08 	call	0x1138	; 0x1138 <debug_tx_number>
  debug_tx_sp();
    1182:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
}
    1186:	08 95       	ret

00001188 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
    1188:	0e 94 9c 08 	call	0x1138	; 0x1138 <debug_tx_number>
  debug_tx_text(",");
    118c:	8e e1       	ldi	r24, 0x1E	; 30
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
}
    1194:	08 95       	ret

00001196 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
    1196:	0e 94 6b 07 	call	0xed6	; 0xed6 <debug_tx_hex>
  debug_tx_nl();
    119a:	0e 94 1b 08 	call	0x1036	; 0x1036 <debug_tx_nl>
}
    119e:	08 95       	ret

000011a0 <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
    11a0:	0e 94 6b 07 	call	0xed6	; 0xed6 <debug_tx_hex>
  debug_tx_sp();
    11a4:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
}
    11a8:	08 95       	ret

000011aa <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
    11aa:	0e 94 6b 07 	call	0xed6	; 0xed6 <debug_tx_hex>
  debug_tx_text(",");
    11ae:	8e e1       	ldi	r24, 0x1E	; 30
    11b0:	91 e0       	ldi	r25, 0x01	; 1
    11b2:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
}
    11b6:	08 95       	ret

000011b8 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
    11b8:	0e 94 c5 07 	call	0xf8a	; 0xf8a <debug_tx_bin>
  debug_tx_nl();
    11bc:	0e 94 1b 08 	call	0x1036	; 0x1036 <debug_tx_nl>
}
    11c0:	08 95       	ret

000011c2 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
    11c2:	0e 94 c5 07 	call	0xf8a	; 0xf8a <debug_tx_bin>
  debug_tx_sp();
    11c6:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
}
    11ca:	08 95       	ret

000011cc <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
    11cc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <debug_tx_bin>
  debug_tx_text(",");
    11d0:	8e e1       	ldi	r24, 0x1E	; 30
    11d2:	91 e0       	ldi	r25, 0x01	; 1
    11d4:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
}
    11d8:	08 95       	ret

000011da <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	7a 01       	movw	r14, r20
    11e4:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    11e6:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    11ea:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_nl(num);
    11ee:	c8 01       	movw	r24, r16
    11f0:	b7 01       	movw	r22, r14
    11f2:	0e 94 ba 08 	call	0x1174	; 0x1174 <debug_tx_number_nl>
}
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	ff 90       	pop	r15
    11fc:	ef 90       	pop	r14
    11fe:	08 95       	ret

00001200 <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	7a 01       	movw	r14, r20
    120a:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    120c:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    1210:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_sp(num);
    1214:	c8 01       	movw	r24, r16
    1216:	b7 01       	movw	r22, r14
    1218:	0e 94 bf 08 	call	0x117e	; 0x117e <debug_tx_number_sp>
}
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	08 95       	ret

00001226 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	7a 01       	movw	r14, r20
    1230:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1232:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    1236:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_cm(num);
    123a:	c8 01       	movw	r24, r16
    123c:	b7 01       	movw	r22, r14
    123e:	0e 94 c4 08 	call	0x1188	; 0x1188 <debug_tx_number_cm>
}
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	08 95       	ret

0000124c <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	7a 01       	movw	r14, r20
    1256:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1258:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    125c:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
    1260:	c8 01       	movw	r24, r16
    1262:	b7 01       	movw	r22, r14
    1264:	0e 94 cb 08 	call	0x1196	; 0x1196 <debug_tx_number_hex_nl>
}
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	08 95       	ret

00001272 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
    1272:	ef 92       	push	r14
    1274:	ff 92       	push	r15
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	7a 01       	movw	r14, r20
    127c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    127e:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    1282:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
    1286:	c8 01       	movw	r24, r16
    1288:	b7 01       	movw	r22, r14
    128a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <debug_tx_number_hex_sp>
}
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	08 95       	ret

00001298 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	7a 01       	movw	r14, r20
    12a2:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    12a4:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    12a8:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
    12ac:	c8 01       	movw	r24, r16
    12ae:	b7 01       	movw	r22, r14
    12b0:	0e 94 d5 08 	call	0x11aa	; 0x11aa <debug_tx_number_hex_cm>
}
    12b4:	1f 91       	pop	r17
    12b6:	0f 91       	pop	r16
    12b8:	ff 90       	pop	r15
    12ba:	ef 90       	pop	r14
    12bc:	08 95       	ret

000012be <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	7a 01       	movw	r14, r20
    12c8:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    12ca:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    12ce:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
    12d2:	c8 01       	movw	r24, r16
    12d4:	b7 01       	movw	r22, r14
    12d6:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <debug_tx_number_bin_nl>
}
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	08 95       	ret

000012e4 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	7a 01       	movw	r14, r20
    12ee:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    12f0:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    12f4:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
    12f8:	c8 01       	movw	r24, r16
    12fa:	b7 01       	movw	r22, r14
    12fc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <debug_tx_number_bin_sp>
}
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	08 95       	ret

0000130a <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	7a 01       	movw	r14, r20
    1314:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1316:	0e 94 2a 08 	call	0x1054	; 0x1054 <debug_tx_text>
  debug_tx_sp();
    131a:	0e 94 22 08 	call	0x1044	; 0x1044 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	0e 94 e6 08 	call	0x11cc	; 0x11cc <debug_tx_number_bin_cm>
}
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	08 95       	ret

00001330 <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
    1330:	e5 e8       	ldi	r30, 0x85	; 133
    1332:	f1 e0       	ldi	r31, 0x01	; 1
    1334:	e8 0f       	add	r30, r24
    1336:	f1 1d       	adc	r31, r1
    1338:	83 81       	ldd	r24, Z+3	; 0x03
}
    133a:	08 95       	ret

0000133c <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
    133c:	80 91 a8 01 	lds	r24, 0x01A8
}
    1340:	08 95       	ret

00001342 <debug_flush_buf>:

void debug_flush_buf(void){
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
    1346:	fc 01       	movw	r30, r24
    1348:	eb 57       	subi	r30, 0x7B	; 123
    134a:	fe 4f       	sbci	r31, 0xFE	; 254
    134c:	13 82       	std	Z+3, r1	; 0x03
    134e:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    1350:	80 32       	cpi	r24, 0x20	; 32
    1352:	91 05       	cpc	r25, r1
    1354:	c1 f7       	brne	.-16     	; 0x1346 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
    1356:	10 92 a8 01 	sts	0x01A8, r1
}
    135a:	08 95       	ret

0000135c <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
    135c:	80 91 87 01 	lds	r24, 0x0187
}
    1360:	08 95       	ret

00001362 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
    1362:	80 91 87 01 	lds	r24, 0x0187
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    1366:	88 23       	and	r24, r24
    1368:	11 f0       	breq	.+4      	; 0x136e <debug_data_available_rx_buf+0xc>
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	08 c0       	rjmp	.+16     	; 0x137e <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
    136e:	80 91 a8 01 	lds	r24, 0x01A8
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	88 23       	and	r24, r24
    1376:	09 f4       	brne	.+2      	; 0x137a <debug_data_available_rx_buf+0x18>
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
    137e:	89 2f       	mov	r24, r25
    1380:	08 95       	ret

00001382 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
    1382:	80 91 a8 01 	lds	r24, 0x01A8
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
    1386:	08 95       	ret

00001388 <debug_init>:

void debug_init(void){
  debug_struct_init();
    1388:	0e 94 61 06 	call	0xcc2	; 0xcc2 <debug_struct_init>
  debug_timings_init();
    138c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <debug_timings_init>
  debug_gpio_init();
    1390:	0e 94 a2 06 	call	0xd44	; 0xd44 <debug_gpio_init>
}
    1394:	08 95       	ret

00001396 <__vector_4>:


ISR(ISR_PCINT_VECT){
    1396:	1f 92       	push	r1
    1398:	0f 92       	push	r0
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	0f 92       	push	r0
    139e:	11 24       	eor	r1, r1
    13a0:	2f 93       	push	r18
    13a2:	3f 93       	push	r19
    13a4:	4f 93       	push	r20
    13a6:	5f 93       	push	r21
    13a8:	6f 93       	push	r22
    13aa:	7f 93       	push	r23
    13ac:	8f 93       	push	r24
    13ae:	9f 93       	push	r25
    13b0:	af 93       	push	r26
    13b2:	bf 93       	push	r27
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
  debug.databsy=1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 87 01 	sts	0x0187, r24
  uint8_t val=debug_rx_byte();
    13be:	0e 94 36 07 	call	0xe6c	; 0xe6c <debug_rx_byte>
    13c2:	98 2f       	mov	r25, r24
  if(debug.error==0){
    13c4:	80 91 85 01 	lds	r24, 0x0185
    13c8:	88 23       	and	r24, r24
    13ca:	99 f4       	brne	.+38     	; 0x13f2 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
    13cc:	e0 91 a8 01 	lds	r30, 0x01A8
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	eb 57       	subi	r30, 0x7B	; 123
    13d4:	fe 4f       	sbci	r31, 0xFE	; 254
    13d6:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
    13d8:	80 91 a8 01 	lds	r24, 0x01A8
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	80 93 a8 01 	sts	0x01A8, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
    13e2:	80 91 a8 01 	lds	r24, 0x01A8
    13e6:	81 32       	cpi	r24, 0x21	; 33
    13e8:	10 f0       	brcs	.+4      	; 0x13ee <__vector_4+0x58>
	  debug.bufindex=0;
    13ea:	10 92 a8 01 	sts	0x01A8, r1
	}
    debug_timer_start();
    13ee:	0e 94 90 06 	call	0xd20	; 0xd20 <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	0f 90       	pop	r0
    1410:	1f 90       	pop	r1
    1412:	18 95       	reti

00001414 <__vector_16>:

ISR(TIMER_OVF_VECT){
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
    141e:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
    1422:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
    1424:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
    1426:	10 92 87 01 	sts	0x0187, r1
}
    142a:	0f 90       	pop	r0
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	0f 90       	pop	r0
    1430:	1f 90       	pop	r1
    1432:	18 95       	reti

00001434 <__udivmodqi4>:
    1434:	99 1b       	sub	r25, r25
    1436:	79 e0       	ldi	r23, 0x09	; 9
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <__udivmodqi4_ep>

0000143a <__udivmodqi4_loop>:
    143a:	99 1f       	adc	r25, r25
    143c:	96 17       	cp	r25, r22
    143e:	08 f0       	brcs	.+2      	; 0x1442 <__udivmodqi4_ep>
    1440:	96 1b       	sub	r25, r22

00001442 <__udivmodqi4_ep>:
    1442:	88 1f       	adc	r24, r24
    1444:	7a 95       	dec	r23
    1446:	c9 f7       	brne	.-14     	; 0x143a <__udivmodqi4_loop>
    1448:	80 95       	com	r24
    144a:	08 95       	ret

0000144c <__udivmodsi4>:
    144c:	a1 e2       	ldi	r26, 0x21	; 33
    144e:	1a 2e       	mov	r1, r26
    1450:	aa 1b       	sub	r26, r26
    1452:	bb 1b       	sub	r27, r27
    1454:	fd 01       	movw	r30, r26
    1456:	0d c0       	rjmp	.+26     	; 0x1472 <__udivmodsi4_ep>

00001458 <__udivmodsi4_loop>:
    1458:	aa 1f       	adc	r26, r26
    145a:	bb 1f       	adc	r27, r27
    145c:	ee 1f       	adc	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	a2 17       	cp	r26, r18
    1462:	b3 07       	cpc	r27, r19
    1464:	e4 07       	cpc	r30, r20
    1466:	f5 07       	cpc	r31, r21
    1468:	20 f0       	brcs	.+8      	; 0x1472 <__udivmodsi4_ep>
    146a:	a2 1b       	sub	r26, r18
    146c:	b3 0b       	sbc	r27, r19
    146e:	e4 0b       	sbc	r30, r20
    1470:	f5 0b       	sbc	r31, r21

00001472 <__udivmodsi4_ep>:
    1472:	66 1f       	adc	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	1a 94       	dec	r1
    147c:	69 f7       	brne	.-38     	; 0x1458 <__udivmodsi4_loop>
    147e:	60 95       	com	r22
    1480:	70 95       	com	r23
    1482:	80 95       	com	r24
    1484:	90 95       	com	r25
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	bd 01       	movw	r22, r26
    148c:	cf 01       	movw	r24, r30
    148e:	08 95       	ret

00001490 <_exit>:
    1490:	f8 94       	cli

00001492 <__stop_program>:
    1492:	ff cf       	rjmp	.-2      	; 0x1492 <__stop_program>
